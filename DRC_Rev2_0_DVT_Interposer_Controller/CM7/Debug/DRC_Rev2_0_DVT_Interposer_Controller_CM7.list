
DRC_Rev2_0_DVT_Interposer_Controller_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000774c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080079e4  080079e4  000089e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a1c  08007a1c  00009764  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007a1c  08007a1c  00008a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a24  08007a24  00009764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a24  08007a24  00008a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a28  08007a28  00008a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000764  24000000  08007a2c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  24000764  08008190  00009764  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000ecc  08008190  00009ecc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009764  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab27  00000000  00000000  00009792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed6  00000000  00000000  000242b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00027190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f74  00000000  00000000  00028570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b03c  00000000  00000000  000294e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a92c  00000000  00000000  00064520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00182e52  00000000  00000000  0007ee4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00201c9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005560  00000000  00000000  00201ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00207244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000764 	.word	0x24000764
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080079cc 	.word	0x080079cc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000768 	.word	0x24000768
 80002d4:	080079cc 	.word	0x080079cc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <ExitRun0Mode+0x30>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	f023 0306 	bic.w	r3, r3, #6
 800076c:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <ExitRun0Mode+0x30>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000774:	bf00      	nop
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <ExitRun0Mode+0x30>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f9      	beq.n	8000776 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	58024800 	.word	0x58024800

08000794 <IOEXP_Init>:
IO expander functions Start

*//////////////////////////////////////////////////////////////////////////////

//Initialize IO expander from its parameters
void IOEXP_Init(IOEXP_t* IOX){
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af02      	add	r7, sp, #8
 800079a:	6078      	str	r0, [r7, #4]
	//config IO expander

	uint8_t ConfigBytes[4] = {
 800079c:	238c      	movs	r3, #140	@ 0x8c
 800079e:	733b      	strb	r3, [r7, #12]
			IOEXP_Config_CMD,
			(IOX->pinMode >> 16) & 0xFF,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	0c1b      	lsrs	r3, r3, #16
	uint8_t ConfigBytes[4] = {
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	737b      	strb	r3, [r7, #13]
			(IOX->pinMode >>  8) & 0xFF,
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	0a1b      	lsrs	r3, r3, #8
	uint8_t ConfigBytes[4] = {
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	73bb      	strb	r3, [r7, #14]
			(IOX->pinMode)		 & 0xFF
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
	uint8_t ConfigBytes[4] = {
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	73fb      	strb	r3, [r7, #15]
	};

	HAL_I2C_Master_Transmit(IOX->handle, IOX->address << 1, ConfigBytes, 4, 50);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	b299      	uxth	r1, r3
 80007c8:	f107 020c 	add.w	r2, r7, #12
 80007cc:	2332      	movs	r3, #50	@ 0x32
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2304      	movs	r3, #4
 80007d2:	f001 fd79 	bl	80022c8 <HAL_I2C_Master_Transmit>

	uint8_t pinStateBytes[4] = {
 80007d6:	2384      	movs	r3, #132	@ 0x84
 80007d8:	723b      	strb	r3, [r7, #8]
			IOEXP_PinSet_CMD,
			(IOX->state >> 16) & 0xFF,
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	0c1b      	lsrs	r3, r3, #16
	uint8_t pinStateBytes[4] = {
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	727b      	strb	r3, [r7, #9]
			(IOX->state >>  8) & 0xFF,
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
	uint8_t pinStateBytes[4] = {
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	72bb      	strb	r3, [r7, #10]
			(IOX->state)	   & 0xFF
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	68db      	ldr	r3, [r3, #12]
	uint8_t pinStateBytes[4] = {
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	72fb      	strb	r3, [r7, #11]
	};

	HAL_I2C_Master_Transmit(IOX->handle, IOX->address << 1, pinStateBytes, 4, 50);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6818      	ldr	r0, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	b299      	uxth	r1, r3
 8000802:	f107 0208 	add.w	r2, r7, #8
 8000806:	2332      	movs	r3, #50	@ 0x32
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2304      	movs	r3, #4
 800080c:	f001 fd5c 	bl	80022c8 <HAL_I2C_Master_Transmit>

	return;
 8000810:	bf00      	nop
}
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <SPIIOEXP_Init>:
	HAL_I2C_Master_Transmit(IOX->handle, IOX->address << 1, pinStateBytes, 4, 50);

	return;
}

void SPIIOEXP_Init(SPIIOEXP_t* SPIEXP){
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	uint8_t spiWords[] = {0x40, 0x00, 0xFF, 0xFF}; //Device OPCODE -> 0x40, All port A pins to inputs, all port B pins to inputs
 8000820:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <SPIIOEXP_Init+0x44>)
 8000822:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPIEXP->cs_port, SPIEXP->cs_pin, GPIO_PIN_RESET);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6858      	ldr	r0, [r3, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	891b      	ldrh	r3, [r3, #8]
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	f001 fc66 	bl	8002100 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPIEXP->handle, spiWords, 4, 100);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	f107 010c 	add.w	r1, r7, #12
 800083c:	2364      	movs	r3, #100	@ 0x64
 800083e:	2204      	movs	r2, #4
 8000840:	f005 f9dc 	bl	8005bfc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPIEXP->cs_port, SPIEXP->cs_pin, GPIO_PIN_SET);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6858      	ldr	r0, [r3, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	891b      	ldrh	r3, [r3, #8]
 800084c:	2201      	movs	r2, #1
 800084e:	4619      	mov	r1, r3
 8000850:	f001 fc56 	bl	8002100 <HAL_GPIO_WritePin>
	return;
 8000854:	bf00      	nop
}
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	ffff0040 	.word	0xffff0040

08000860 <SPIIOEXP_SetModes>:

//Sets modes of SPI IO Expander pins. 1 -> Input; 0 -> Output
void SPIIOEXP_SetModes(SPIIOEXP_t* SPIEXP, uint16_t mask, uint16_t mode){
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
 800086c:	4613      	mov	r3, r2
 800086e:	803b      	strh	r3, [r7, #0]

	uint8_t currentPortA_Mode = (SPIEXP->pinMode >> 8) & 0xFF;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	895b      	ldrh	r3, [r3, #10]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	b29b      	uxth	r3, r3
 8000878:	73fb      	strb	r3, [r7, #15]
	uint8_t currentPortB_Mode = SPIEXP->pinMode & 0xFF;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	895b      	ldrh	r3, [r3, #10]
 800087e:	73bb      	strb	r3, [r7, #14]

	uint8_t newPortA_Mode = (currentPortA_Mode & ~((mask >> 8) & 0xFF)) | ((mode >> 8) & (mask >> 8) & 0xFF);
 8000880:	887b      	ldrh	r3, [r7, #2]
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b29b      	uxth	r3, r3
 8000886:	b25b      	sxtb	r3, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	b25a      	sxtb	r2, r3
 800088c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000890:	4013      	ands	r3, r2
 8000892:	b25a      	sxtb	r2, r3
 8000894:	8839      	ldrh	r1, [r7, #0]
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	400b      	ands	r3, r1
 800089a:	b29b      	uxth	r3, r3
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	b29b      	uxth	r3, r3
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b25b      	sxtb	r3, r3
 80008a6:	737b      	strb	r3, [r7, #13]
	uint8_t newPortB_Mode = (currentPortB_Mode & ~(mask & 0xFF)) | (mode & mask & 0xFF);
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	b25a      	sxtb	r2, r3
 80008b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008b4:	4013      	ands	r3, r2
 80008b6:	b25a      	sxtb	r2, r3
 80008b8:	883b      	ldrh	r3, [r7, #0]
 80008ba:	b2d9      	uxtb	r1, r3
 80008bc:	887b      	ldrh	r3, [r7, #2]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	400b      	ands	r3, r1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b25b      	sxtb	r3, r3
 80008ca:	733b      	strb	r3, [r7, #12]

	SPIEXP->pinMode = (newPortA_Mode << 8) | newPortB_Mode;
 80008cc:	7b7b      	ldrb	r3, [r7, #13]
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	021b      	lsls	r3, r3, #8
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	7b3b      	ldrb	r3, [r7, #12]
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	b21b      	sxth	r3, r3
 80008dc:	b29a      	uxth	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	815a      	strh	r2, [r3, #10]

	uint8_t spiWords[] = {0x40, 0x00, newPortA_Mode, newPortB_Mode};
 80008e2:	2340      	movs	r3, #64	@ 0x40
 80008e4:	723b      	strb	r3, [r7, #8]
 80008e6:	2300      	movs	r3, #0
 80008e8:	727b      	strb	r3, [r7, #9]
 80008ea:	7b7b      	ldrb	r3, [r7, #13]
 80008ec:	72bb      	strb	r3, [r7, #10]
 80008ee:	7b3b      	ldrb	r3, [r7, #12]
 80008f0:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(SPIEXP->cs_port, SPIEXP->cs_pin, GPIO_PIN_RESET);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6858      	ldr	r0, [r3, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	891b      	ldrh	r3, [r3, #8]
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	f001 fbff 	bl	8002100 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPIEXP->handle, spiWords, 4, 100);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	f107 0108 	add.w	r1, r7, #8
 800090a:	2364      	movs	r3, #100	@ 0x64
 800090c:	2204      	movs	r2, #4
 800090e:	f005 f975 	bl	8005bfc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPIEXP->cs_port, SPIEXP->cs_pin, GPIO_PIN_SET);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6858      	ldr	r0, [r3, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	891b      	ldrh	r3, [r3, #8]
 800091a:	2201      	movs	r2, #1
 800091c:	4619      	mov	r1, r3
 800091e:	f001 fbef 	bl	8002100 <HAL_GPIO_WritePin>

	return;
 8000922:	bf00      	nop
}
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <SPIIOEXP_WritePins>:

	SPIIOEXP_SetModes(SPIPin->IOEXP, SPIPin->Pin, mode_16bits);

}

void SPIIOEXP_WritePins(SPIIOEXP_t* SPIEXP, uint16_t mask, uint16_t state){
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	460b      	mov	r3, r1
 8000934:	807b      	strh	r3, [r7, #2]
 8000936:	4613      	mov	r3, r2
 8000938:	803b      	strh	r3, [r7, #0]

	uint8_t currentPortA_State = (SPIEXP->state >> 8) & 0xFF;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	899b      	ldrh	r3, [r3, #12]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	b29b      	uxth	r3, r3
 8000942:	73fb      	strb	r3, [r7, #15]
	uint8_t currentPortB_State = SPIEXP->state & 0xFF;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	899b      	ldrh	r3, [r3, #12]
 8000948:	73bb      	strb	r3, [r7, #14]

	uint8_t newPortA_State = (currentPortA_State & ~((mask >> 8) & 0xFF)) | ((state >> 8) & (mask >> 8) & 0xFF);
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	b29b      	uxth	r3, r3
 8000950:	b25b      	sxtb	r3, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	b25a      	sxtb	r2, r3
 8000956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095a:	4013      	ands	r3, r2
 800095c:	b25a      	sxtb	r2, r3
 800095e:	8839      	ldrh	r1, [r7, #0]
 8000960:	887b      	ldrh	r3, [r7, #2]
 8000962:	400b      	ands	r3, r1
 8000964:	b29b      	uxth	r3, r3
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	b25b      	sxtb	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b25b      	sxtb	r3, r3
 8000970:	737b      	strb	r3, [r7, #13]
	uint8_t newPortB_State = (currentPortB_State & ~(mask & 0xFF)) | (state & mask & 0xFF);
 8000972:	887b      	ldrh	r3, [r7, #2]
 8000974:	b25b      	sxtb	r3, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	b25a      	sxtb	r2, r3
 800097a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800097e:	4013      	ands	r3, r2
 8000980:	b25a      	sxtb	r2, r3
 8000982:	883b      	ldrh	r3, [r7, #0]
 8000984:	b2d9      	uxtb	r1, r3
 8000986:	887b      	ldrh	r3, [r7, #2]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	400b      	ands	r3, r1
 800098c:	b2db      	uxtb	r3, r3
 800098e:	b25b      	sxtb	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b25b      	sxtb	r3, r3
 8000994:	733b      	strb	r3, [r7, #12]

	SPIEXP->state = (newPortA_State << 8) | newPortB_State;
 8000996:	7b7b      	ldrb	r3, [r7, #13]
 8000998:	b21b      	sxth	r3, r3
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	b21a      	sxth	r2, r3
 800099e:	7b3b      	ldrb	r3, [r7, #12]
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	819a      	strh	r2, [r3, #12]

	uint8_t spiWords[] = {0x40, 0x12, newPortA_State, newPortB_State};
 80009ac:	2340      	movs	r3, #64	@ 0x40
 80009ae:	723b      	strb	r3, [r7, #8]
 80009b0:	2312      	movs	r3, #18
 80009b2:	727b      	strb	r3, [r7, #9]
 80009b4:	7b7b      	ldrb	r3, [r7, #13]
 80009b6:	72bb      	strb	r3, [r7, #10]
 80009b8:	7b3b      	ldrb	r3, [r7, #12]
 80009ba:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(SPIEXP->cs_port, SPIEXP->cs_pin, GPIO_PIN_RESET);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6858      	ldr	r0, [r3, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	891b      	ldrh	r3, [r3, #8]
 80009c4:	2200      	movs	r2, #0
 80009c6:	4619      	mov	r1, r3
 80009c8:	f001 fb9a 	bl	8002100 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPIEXP->handle, spiWords, 4, 100);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f107 0108 	add.w	r1, r7, #8
 80009d4:	2364      	movs	r3, #100	@ 0x64
 80009d6:	2204      	movs	r2, #4
 80009d8:	f005 f910 	bl	8005bfc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPIEXP->cs_port, SPIEXP->cs_pin, GPIO_PIN_SET);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6858      	ldr	r0, [r3, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	891b      	ldrh	r3, [r3, #8]
 80009e4:	2201      	movs	r2, #1
 80009e6:	4619      	mov	r1, r3
 80009e8:	f001 fb8a 	bl	8002100 <HAL_GPIO_WritePin>

	return;
 80009ec:	bf00      	nop
}
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <SPIIOEXP_SetPin>:

void SPIIOEXP_SetPin(SPIIOXPin_t* SPIPin, bool state){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]

	uint16_t state_16bits = state ? 0xFFFF : 0x0000;
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <SPIIOEXP_SetPin+0x18>
 8000a06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a0a:	e000      	b.n	8000a0e <SPIIOEXP_SetPin+0x1a>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	81fb      	strh	r3, [r7, #14]

	SPIIOEXP_WritePins(SPIPin->IOEXP, SPIPin->Pin, state_16bits);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6858      	ldr	r0, [r3, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	891b      	ldrh	r3, [r3, #8]
 8000a18:	89fa      	ldrh	r2, [r7, #14]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f7ff ff85 	bl	800092a <SPIIOEXP_WritePins>

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a2e:	f000 fcd1 	bl	80013d4 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a36:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a38:	bf00      	nop
 8000a3a:	4bb1      	ldr	r3, [pc, #708]	@ (8000d00 <main+0x2d8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d004      	beq.n	8000a50 <main+0x28>
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	60fa      	str	r2, [r7, #12]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	dcf4      	bgt.n	8000a3a <main+0x12>
  if ( timeout < 0 )
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	da01      	bge.n	8000a5a <main+0x32>
  {
  Error_Handler();
 8000a56:	f000 fce9 	bl	800142c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5a:	f000 ff83 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5e:	f000 f9a7 	bl	8000db0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a62:	4ba7      	ldr	r3, [pc, #668]	@ (8000d00 <main+0x2d8>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	4aa5      	ldr	r2, [pc, #660]	@ (8000d00 <main+0x2d8>)
 8000a6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a72:	4ba3      	ldr	r3, [pc, #652]	@ (8000d00 <main+0x2d8>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f001 fb57 	bl	8002134 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a86:	2100      	movs	r1, #0
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 fb6d 	bl	8002168 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a92:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a94:	bf00      	nop
 8000a96:	4b9a      	ldr	r3, [pc, #616]	@ (8000d00 <main+0x2d8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d104      	bne.n	8000aac <main+0x84>
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	1e5a      	subs	r2, r3, #1
 8000aa6:	60fa      	str	r2, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	dcf4      	bgt.n	8000a96 <main+0x6e>
if ( timeout < 0 )
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	da01      	bge.n	8000ab6 <main+0x8e>
{
Error_Handler();
 8000ab2:	f000 fcbb 	bl	800142c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f000 fb65 	bl	8001184 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000aba:	f000 f9f9 	bl	8000eb0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000abe:	f000 fa37 	bl	8000f30 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ac2:	f000 fae1 	bl	8001088 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ac6:	f000 fb2b 	bl	8001120 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8000aca:	f000 fa87 	bl	8000fdc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  //IO expander initialization
  IOEXP_Init(&IOEXP_SPDT);
 8000ace:	488d      	ldr	r0, [pc, #564]	@ (8000d04 <main+0x2dc>)
 8000ad0:	f7ff fe60 	bl	8000794 <IOEXP_Init>
  IOEXP_Init(&IOEXP_LED);
 8000ad4:	488c      	ldr	r0, [pc, #560]	@ (8000d08 <main+0x2e0>)
 8000ad6:	f7ff fe5d 	bl	8000794 <IOEXP_Init>

  SPIIOEXP_Init(&SPIEXP0);
 8000ada:	488c      	ldr	r0, [pc, #560]	@ (8000d0c <main+0x2e4>)
 8000adc:	f7ff fe9c 	bl	8000818 <SPIIOEXP_Init>
  SPIIOEXP_Init(&SPIEXP1);
 8000ae0:	488b      	ldr	r0, [pc, #556]	@ (8000d10 <main+0x2e8>)
 8000ae2:	f7ff fe99 	bl	8000818 <SPIIOEXP_Init>
  SPIIOEXP_Init(&SPIEXP2);
 8000ae6:	488b      	ldr	r0, [pc, #556]	@ (8000d14 <main+0x2ec>)
 8000ae8:	f7ff fe96 	bl	8000818 <SPIIOEXP_Init>
  SPIIOEXP_Init(&SPIEXP3);
 8000aec:	488a      	ldr	r0, [pc, #552]	@ (8000d18 <main+0x2f0>)
 8000aee:	f7ff fe93 	bl	8000818 <SPIIOEXP_Init>
  SPIIOEXP_Init(&SPIEXP4);
 8000af2:	488a      	ldr	r0, [pc, #552]	@ (8000d1c <main+0x2f4>)
 8000af4:	f7ff fe90 	bl	8000818 <SPIIOEXP_Init>
  SPIIOEXP_Init(&SPIEXP5);
 8000af8:	4889      	ldr	r0, [pc, #548]	@ (8000d20 <main+0x2f8>)
 8000afa:	f7ff fe8d 	bl	8000818 <SPIIOEXP_Init>
  SPIIOEXP_Init(&SPIEXP6);
 8000afe:	4889      	ldr	r0, [pc, #548]	@ (8000d24 <main+0x2fc>)
 8000b00:	f7ff fe8a 	bl	8000818 <SPIIOEXP_Init>
//  IOEXP_SetModes(&IOEXP_SPDT, 0x00000C, 0);
//  IOEXP_SetPins(&IOEXP_SPDT, 0x00000C, 0);
//  IOEXP_SetModes(&IOEXP_LED, 0xFFFF03, 1);
//  IOEXP_SetPins(&IOEXP_LED, 0xFFFF03, 1);

  SPIIOEXP_SetModes(&SPIEXP0, 0xFFFF, 0x0000);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b0a:	4880      	ldr	r0, [pc, #512]	@ (8000d0c <main+0x2e4>)
 8000b0c:	f7ff fea8 	bl	8000860 <SPIIOEXP_SetModes>
  SPIIOEXP_SetModes(&SPIEXP1, 0xFFFF, 0x0000);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b16:	487e      	ldr	r0, [pc, #504]	@ (8000d10 <main+0x2e8>)
 8000b18:	f7ff fea2 	bl	8000860 <SPIIOEXP_SetModes>
  SPIIOEXP_SetModes(&SPIEXP2, 0xFFFF, 0x0000);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b22:	487c      	ldr	r0, [pc, #496]	@ (8000d14 <main+0x2ec>)
 8000b24:	f7ff fe9c 	bl	8000860 <SPIIOEXP_SetModes>
  SPIIOEXP_SetModes(&SPIEXP3, 0xFFFF, 0x0000);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b2e:	487a      	ldr	r0, [pc, #488]	@ (8000d18 <main+0x2f0>)
 8000b30:	f7ff fe96 	bl	8000860 <SPIIOEXP_SetModes>
  SPIIOEXP_SetModes(&SPIEXP4, 0xFFFF, 0x0000);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b3a:	4878      	ldr	r0, [pc, #480]	@ (8000d1c <main+0x2f4>)
 8000b3c:	f7ff fe90 	bl	8000860 <SPIIOEXP_SetModes>
  SPIIOEXP_SetModes(&SPIEXP5, 0xFFFF, 0x0000);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b46:	4876      	ldr	r0, [pc, #472]	@ (8000d20 <main+0x2f8>)
 8000b48:	f7ff fe8a 	bl	8000860 <SPIIOEXP_SetModes>
  SPIIOEXP_SetModes(&SPIEXP6, 0xFFFF, 0x0000);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b52:	4874      	ldr	r0, [pc, #464]	@ (8000d24 <main+0x2fc>)
 8000b54:	f7ff fe84 	bl	8000860 <SPIIOEXP_SetModes>
  SPIIOEXP_WritePins(&SPIEXP0, 0xFFFF, 0x0000);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b5e:	486b      	ldr	r0, [pc, #428]	@ (8000d0c <main+0x2e4>)
 8000b60:	f7ff fee3 	bl	800092a <SPIIOEXP_WritePins>
  SPIIOEXP_WritePins(&SPIEXP1, 0xFFFF, 0x0000);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b6a:	4869      	ldr	r0, [pc, #420]	@ (8000d10 <main+0x2e8>)
 8000b6c:	f7ff fedd 	bl	800092a <SPIIOEXP_WritePins>
  SPIIOEXP_WritePins(&SPIEXP2, 0xFFFF, 0x0000);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b76:	4867      	ldr	r0, [pc, #412]	@ (8000d14 <main+0x2ec>)
 8000b78:	f7ff fed7 	bl	800092a <SPIIOEXP_WritePins>
  SPIIOEXP_WritePins(&SPIEXP3, 0xFFFF, 0x0000);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b82:	4865      	ldr	r0, [pc, #404]	@ (8000d18 <main+0x2f0>)
 8000b84:	f7ff fed1 	bl	800092a <SPIIOEXP_WritePins>
  SPIIOEXP_WritePins(&SPIEXP4, 0xFFFF, 0x0000);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b8e:	4863      	ldr	r0, [pc, #396]	@ (8000d1c <main+0x2f4>)
 8000b90:	f7ff fecb 	bl	800092a <SPIIOEXP_WritePins>
  SPIIOEXP_WritePins(&SPIEXP5, 0xFFFF, 0x0000);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b9a:	4861      	ldr	r0, [pc, #388]	@ (8000d20 <main+0x2f8>)
 8000b9c:	f7ff fec5 	bl	800092a <SPIIOEXP_WritePins>
  SPIIOEXP_WritePins(&SPIEXP6, 0xFFFF, 0x0000);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ba6:	485f      	ldr	r0, [pc, #380]	@ (8000d24 <main+0x2fc>)
 8000ba8:	f7ff febf 	bl	800092a <SPIIOEXP_WritePins>

  SPIIOEXP_SetPin(&SPIPIN_SEL17, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	485e      	ldr	r0, [pc, #376]	@ (8000d28 <main+0x300>)
 8000bb0:	f7ff ff20 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL46, 0);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	485d      	ldr	r0, [pc, #372]	@ (8000d2c <main+0x304>)
 8000bb8:	f7ff ff1c 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL74, 1);//1
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	485c      	ldr	r0, [pc, #368]	@ (8000d30 <main+0x308>)
 8000bc0:	f7ff ff18 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL40, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	485b      	ldr	r0, [pc, #364]	@ (8000d34 <main+0x30c>)
 8000bc8:	f7ff ff14 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL55, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	485a      	ldr	r0, [pc, #360]	@ (8000d38 <main+0x310>)
 8000bd0:	f7ff ff10 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL51, 1);//1
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4859      	ldr	r0, [pc, #356]	@ (8000d3c <main+0x314>)
 8000bd8:	f7ff ff0c 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL21, 0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4858      	ldr	r0, [pc, #352]	@ (8000d40 <main+0x318>)
 8000be0:	f7ff ff08 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL50, 0);
 8000be4:	2100      	movs	r1, #0
 8000be6:	4857      	ldr	r0, [pc, #348]	@ (8000d44 <main+0x31c>)
 8000be8:	f7ff ff04 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL48, 1);//1
 8000bec:	2101      	movs	r1, #1
 8000bee:	4856      	ldr	r0, [pc, #344]	@ (8000d48 <main+0x320>)
 8000bf0:	f7ff ff00 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL34, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4855      	ldr	r0, [pc, #340]	@ (8000d4c <main+0x324>)
 8000bf8:	f7ff fefc 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL32, 0);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4854      	ldr	r0, [pc, #336]	@ (8000d50 <main+0x328>)
 8000c00:	f7ff fef8 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL3, 1);//1
 8000c04:	2101      	movs	r1, #1
 8000c06:	4853      	ldr	r0, [pc, #332]	@ (8000d54 <main+0x32c>)
 8000c08:	f7ff fef4 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL2, 0);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4852      	ldr	r0, [pc, #328]	@ (8000d58 <main+0x330>)
 8000c10:	f7ff fef0 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL10, 0);
 8000c14:	2100      	movs	r1, #0
 8000c16:	4851      	ldr	r0, [pc, #324]	@ (8000d5c <main+0x334>)
 8000c18:	f7ff feec 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL36, 1);//1
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4850      	ldr	r0, [pc, #320]	@ (8000d60 <main+0x338>)
 8000c20:	f7ff fee8 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL35, 0);
 8000c24:	2100      	movs	r1, #0
 8000c26:	484f      	ldr	r0, [pc, #316]	@ (8000d64 <main+0x33c>)
 8000c28:	f7ff fee4 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL6, 0);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	484e      	ldr	r0, [pc, #312]	@ (8000d68 <main+0x340>)
 8000c30:	f7ff fee0 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SEL33, 1);//1
 8000c34:	2101      	movs	r1, #1
 8000c36:	484d      	ldr	r0, [pc, #308]	@ (8000d6c <main+0x344>)
 8000c38:	f7ff fedc 	bl	80009f4 <SPIIOEXP_SetPin>

  //SPDT enable signals (ACTIVE LOW)
  SPIIOEXP_SetPin(&SPIPIN_SPDTEN, 0);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	484c      	ldr	r0, [pc, #304]	@ (8000d70 <main+0x348>)
 8000c40:	f7ff fed8 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_SPDTEN2, 0);
 8000c44:	2100      	movs	r1, #0
 8000c46:	484b      	ldr	r0, [pc, #300]	@ (8000d74 <main+0x34c>)
 8000c48:	f7ff fed4 	bl	80009f4 <SPIIOEXP_SetPin>
   *  1  0  1 36
   *  1  1  0 6
   *  1  1  1 35
   *
   */
  SPIIOEXP_SetPin(&SPIPIN_MDAC0_A0, 0);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	484a      	ldr	r0, [pc, #296]	@ (8000d78 <main+0x350>)
 8000c50:	f7ff fed0 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_MDAC0_A1, 0);
 8000c54:	2100      	movs	r1, #0
 8000c56:	4849      	ldr	r0, [pc, #292]	@ (8000d7c <main+0x354>)
 8000c58:	f7ff fecc 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_MDAC0_A2, 0);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4848      	ldr	r0, [pc, #288]	@ (8000d80 <main+0x358>)
 8000c60:	f7ff fec8 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_nMEN0, 0);
 8000c64:	2100      	movs	r1, #0
 8000c66:	4847      	ldr	r0, [pc, #284]	@ (8000d84 <main+0x35c>)
 8000c68:	f7ff fec4 	bl	80009f4 <SPIIOEXP_SetPin>
   *  1  0  1 51
   *  1  1  0 48
   *  1  1  1 21
   *
   */
  SPIIOEXP_SetPin(&SPIPIN_MDAC1_A0, 0);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4846      	ldr	r0, [pc, #280]	@ (8000d88 <main+0x360>)
 8000c70:	f7ff fec0 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_MDAC1_A1, 0);
 8000c74:	2100      	movs	r1, #0
 8000c76:	4845      	ldr	r0, [pc, #276]	@ (8000d8c <main+0x364>)
 8000c78:	f7ff febc 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_MDAC1_A2, 0);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4844      	ldr	r0, [pc, #272]	@ (8000d90 <main+0x368>)
 8000c80:	f7ff feb8 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_nMEN1, 0);
 8000c84:	2100      	movs	r1, #0
 8000c86:	4843      	ldr	r0, [pc, #268]	@ (8000d94 <main+0x36c>)
 8000c88:	f7ff feb4 	bl	80009f4 <SPIIOEXP_SetPin>
   *  1  0  1 55
   *  1  1  0 51
   *  1  1  1 21
   *
   */
  SPIIOEXP_SetPin(&SPIPIN_MADC_A0, 0);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4842      	ldr	r0, [pc, #264]	@ (8000d98 <main+0x370>)
 8000c90:	f7ff feb0 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_MADC_A1, 0);
 8000c94:	2100      	movs	r1, #0
 8000c96:	4841      	ldr	r0, [pc, #260]	@ (8000d9c <main+0x374>)
 8000c98:	f7ff feac 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_MADC_A2, 0);
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4840      	ldr	r0, [pc, #256]	@ (8000da0 <main+0x378>)
 8000ca0:	f7ff fea8 	bl	80009f4 <SPIIOEXP_SetPin>
  SPIIOEXP_SetPin(&SPIPIN_nMEN2, 0);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	483f      	ldr	r0, [pc, #252]	@ (8000da4 <main+0x37c>)
 8000ca8:	f7ff fea4 	bl	80009f4 <SPIIOEXP_SetPin>

  int i = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  while(1){
	  if(SPIPins[i]->is90Pin != 1) {
 8000cb0:	4a3d      	ldr	r2, [pc, #244]	@ (8000da8 <main+0x380>)
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d003      	beq.n	8000cc6 <main+0x29e>
		  i++;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
		  continue;
 8000cc4:	e01a      	b.n	8000cfc <main+0x2d4>
	  }
	  SPIIOEXP_SetPin(SPIPins[i], 0);
 8000cc6:	4a38      	ldr	r2, [pc, #224]	@ (8000da8 <main+0x380>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe8f 	bl	80009f4 <SPIIOEXP_SetPin>
	  HAL_Delay(100);
 8000cd6:	2064      	movs	r0, #100	@ 0x64
 8000cd8:	f000 fed6 	bl	8001a88 <HAL_Delay>
	  i++;
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
	  i%=90;
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	4a31      	ldr	r2, [pc, #196]	@ (8000dac <main+0x384>)
 8000ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cea:	441a      	add	r2, r3
 8000cec:	1191      	asrs	r1, r2, #6
 8000cee:	17da      	asrs	r2, r3, #31
 8000cf0:	1a8a      	subs	r2, r1, r2
 8000cf2:	215a      	movs	r1, #90	@ 0x5a
 8000cf4:	fb01 f202 	mul.w	r2, r1, r2
 8000cf8:	1a9b      	subs	r3, r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
	  if(SPIPins[i]->is90Pin != 1) {
 8000cfc:	e7d8      	b.n	8000cb0 <main+0x288>
 8000cfe:	bf00      	nop
 8000d00:	58024400 	.word	0x58024400
 8000d04:	24000008 	.word	0x24000008
 8000d08:	24000018 	.word	0x24000018
 8000d0c:	24000028 	.word	0x24000028
 8000d10:	24000038 	.word	0x24000038
 8000d14:	24000048 	.word	0x24000048
 8000d18:	24000058 	.word	0x24000058
 8000d1c:	24000068 	.word	0x24000068
 8000d20:	24000078 	.word	0x24000078
 8000d24:	24000088 	.word	0x24000088
 8000d28:	24000470 	.word	0x24000470
 8000d2c:	2400047c 	.word	0x2400047c
 8000d30:	24000488 	.word	0x24000488
 8000d34:	24000494 	.word	0x24000494
 8000d38:	240004a0 	.word	0x240004a0
 8000d3c:	240004ac 	.word	0x240004ac
 8000d40:	240004b8 	.word	0x240004b8
 8000d44:	240004c4 	.word	0x240004c4
 8000d48:	240004d0 	.word	0x240004d0
 8000d4c:	240004dc 	.word	0x240004dc
 8000d50:	240004e8 	.word	0x240004e8
 8000d54:	240004f4 	.word	0x240004f4
 8000d58:	24000500 	.word	0x24000500
 8000d5c:	24000524 	.word	0x24000524
 8000d60:	24000530 	.word	0x24000530
 8000d64:	2400053c 	.word	0x2400053c
 8000d68:	24000548 	.word	0x24000548
 8000d6c:	24000554 	.word	0x24000554
 8000d70:	2400050c 	.word	0x2400050c
 8000d74:	24000518 	.word	0x24000518
 8000d78:	24000560 	.word	0x24000560
 8000d7c:	2400056c 	.word	0x2400056c
 8000d80:	24000578 	.word	0x24000578
 8000d84:	24000584 	.word	0x24000584
 8000d88:	24000590 	.word	0x24000590
 8000d8c:	2400059c 	.word	0x2400059c
 8000d90:	240005a8 	.word	0x240005a8
 8000d94:	240005b4 	.word	0x240005b4
 8000d98:	240005c0 	.word	0x240005c0
 8000d9c:	240005cc 	.word	0x240005cc
 8000da0:	240005d8 	.word	0x240005d8
 8000da4:	240005e4 	.word	0x240005e4
 8000da8:	240005f0 	.word	0x240005f0
 8000dac:	b60b60b7 	.word	0xb60b60b7

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b09c      	sub	sp, #112	@ 0x70
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dba:	224c      	movs	r2, #76	@ 0x4c
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 fdd7 	bl	8007972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f006 fdd1 	bl	8007972 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f001 ff73 	bl	8002cbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b33      	ldr	r3, [pc, #204]	@ (8000ea8 <SystemClock_Config+0xf8>)
 8000ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dde:	4a32      	ldr	r2, [pc, #200]	@ (8000ea8 <SystemClock_Config+0xf8>)
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000de6:	4b30      	ldr	r3, [pc, #192]	@ (8000ea8 <SystemClock_Config+0xf8>)
 8000de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	4b2e      	ldr	r3, [pc, #184]	@ (8000eac <SystemClock_Config+0xfc>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000df8:	4a2c      	ldr	r2, [pc, #176]	@ (8000eac <SystemClock_Config+0xfc>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b2a      	ldr	r3, [pc, #168]	@ (8000eac <SystemClock_Config+0xfc>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e0c:	bf00      	nop
 8000e0e:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <SystemClock_Config+0xfc>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e1a:	d1f8      	bne.n	8000e0e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e20:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e26:	2301      	movs	r3, #1
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2a:	2340      	movs	r3, #64	@ 0x40
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e32:	2302      	movs	r3, #2
 8000e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 13;
 8000e3a:	230d      	movs	r3, #13
 8000e3c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e42:	2303      	movs	r3, #3
 8000e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 ff98 	bl	8002d90 <HAL_RCC_OscConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e66:	f000 fae1 	bl	800142c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	233f      	movs	r3, #63	@ 0x3f
 8000e6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e7e:	2340      	movs	r3, #64	@ 0x40
 8000e80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 fbd7 	bl	8003644 <HAL_RCC_ClockConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000e9c:	f000 fac6 	bl	800142c <Error_Handler>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3770      	adds	r7, #112	@ 0x70
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	58000400 	.word	0x58000400
 8000eac:	58024800 	.word	0x58024800

08000eb0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f28 <MX_I2C2_Init+0x78>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f2c <MX_I2C2_Init+0x7c>)
 8000ebe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eea:	480e      	ldr	r0, [pc, #56]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000eec:	f001 f950 	bl	8002190 <HAL_I2C_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ef6:	f000 fa99 	bl	800142c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000efe:	f001 fd15 	bl	800292c <HAL_I2CEx_ConfigAnalogFilter>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f08:	f000 fa90 	bl	800142c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_I2C2_Init+0x74>)
 8000f10:	f001 fd57 	bl	80029c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f1a:	f000 fa87 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	24000780 	.word	0x24000780
 8000f28:	40005800 	.word	0x40005800
 8000f2c:	00707cbb 	.word	0x00707cbb

08000f30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f36:	4a28      	ldr	r2, [pc, #160]	@ (8000fd8 <MX_SPI1_Init+0xa8>)
 8000f38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f42:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f90:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_SPI1_Init+0xa4>)
 8000fc2:	f004 fcf7 	bl	80059b4 <HAL_SPI_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000fcc:	f000 fa2e 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	240007d4 	.word	0x240007d4
 8000fd8:	40013000 	.word	0x40013000

08000fdc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8000fe2:	4a28      	ldr	r2, [pc, #160]	@ (8001084 <MX_SPI2_Init+0xa8>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8000fe8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fee:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001000:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001008:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800100c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001010:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8001014:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001016:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800101c:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <MX_SPI2_Init+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001022:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001028:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <MX_SPI2_Init+0xa4>)
 800102a:	2200      	movs	r2, #0
 800102c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102e:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001030:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001034:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001038:	2200      	movs	r2, #0
 800103a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800103c:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <MX_SPI2_Init+0xa4>)
 800103e:	2200      	movs	r2, #0
 8001040:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001042:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001044:	2200      	movs	r2, #0
 8001046:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001048:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <MX_SPI2_Init+0xa4>)
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001050:	2200      	movs	r2, #0
 8001052:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001056:	2200      	movs	r2, #0
 8001058:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_SPI2_Init+0xa4>)
 800105c:	2200      	movs	r2, #0
 800105e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001060:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_SPI2_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_SPI2_Init+0xa4>)
 800106e:	f004 fca1 	bl	80059b4 <HAL_SPI_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001078:	f000 f9d8 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2400085c 	.word	0x2400085c
 8001084:	40003800 	.word	0x40003800

08001088 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 800108e:	4a23      	ldr	r2, [pc, #140]	@ (800111c <MX_USART1_UART_Init+0x94>)
 8001090:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d0:	4811      	ldr	r0, [pc, #68]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010d2:	f005 f86a 	bl	80061aa <HAL_UART_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010dc:	f000 f9a6 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010e4:	f006 f873 	bl	80071ce <HAL_UARTEx_SetTxFifoThreshold>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f000 f99d 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4808      	ldr	r0, [pc, #32]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 80010f6:	f006 f8a8 	bl	800724a <HAL_UARTEx_SetRxFifoThreshold>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001100:	f000 f994 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <MX_USART1_UART_Init+0x90>)
 8001106:	f006 f829 	bl	800715c <HAL_UARTEx_DisableFifoMode>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001110:	f000 f98c 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	240008e4 	.word	0x240008e4
 800111c:	40011000 	.word	0x40011000

08001120 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001124:	4b15      	ldr	r3, [pc, #84]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001126:	4a16      	ldr	r2, [pc, #88]	@ (8001180 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001128:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800112a:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800112c:	2209      	movs	r2, #9
 800112e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001132:	2202      	movs	r2, #2
 8001134:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001138:	2200      	movs	r2, #0
 800113a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800113e:	2202      	movs	r2, #2
 8001140:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001144:	2200      	movs	r2, #0
 8001146:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800114a:	2200      	movs	r2, #0
 800114c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001150:	2200      	movs	r2, #0
 8001152:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001156:	2200      	movs	r2, #0
 8001158:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800115c:	2200      	movs	r2, #0
 800115e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001162:	2200      	movs	r2, #0
 8001164:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001168:	f001 fc77 	bl	8002a5a <HAL_PCD_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001172:	f000 f95b 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	24000978 	.word	0x24000978
 8001180:	40080000 	.word	0x40080000

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	@ 0x30
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	4b86      	ldr	r3, [pc, #536]	@ (80013b4 <MX_GPIO_Init+0x230>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a0:	4a84      	ldr	r2, [pc, #528]	@ (80013b4 <MX_GPIO_Init+0x230>)
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011aa:	4b82      	ldr	r3, [pc, #520]	@ (80013b4 <MX_GPIO_Init+0x230>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b8:	4b7e      	ldr	r3, [pc, #504]	@ (80013b4 <MX_GPIO_Init+0x230>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011be:	4a7d      	ldr	r2, [pc, #500]	@ (80013b4 <MX_GPIO_Init+0x230>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c8:	4b7a      	ldr	r3, [pc, #488]	@ (80013b4 <MX_GPIO_Init+0x230>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d6:	4b77      	ldr	r3, [pc, #476]	@ (80013b4 <MX_GPIO_Init+0x230>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011dc:	4a75      	ldr	r2, [pc, #468]	@ (80013b4 <MX_GPIO_Init+0x230>)
 80011de:	f043 0320 	orr.w	r3, r3, #32
 80011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e6:	4b73      	ldr	r3, [pc, #460]	@ (80013b4 <MX_GPIO_Init+0x230>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ec:	f003 0320 	and.w	r3, r3, #32
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b6f      	ldr	r3, [pc, #444]	@ (80013b4 <MX_GPIO_Init+0x230>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fa:	4a6e      	ldr	r2, [pc, #440]	@ (80013b4 <MX_GPIO_Init+0x230>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001204:	4b6b      	ldr	r3, [pc, #428]	@ (80013b4 <MX_GPIO_Init+0x230>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b68      	ldr	r3, [pc, #416]	@ (80013b4 <MX_GPIO_Init+0x230>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001218:	4a66      	ldr	r2, [pc, #408]	@ (80013b4 <MX_GPIO_Init+0x230>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001222:	4b64      	ldr	r3, [pc, #400]	@ (80013b4 <MX_GPIO_Init+0x230>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001230:	4b60      	ldr	r3, [pc, #384]	@ (80013b4 <MX_GPIO_Init+0x230>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001236:	4a5f      	ldr	r2, [pc, #380]	@ (80013b4 <MX_GPIO_Init+0x230>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001240:	4b5c      	ldr	r3, [pc, #368]	@ (80013b4 <MX_GPIO_Init+0x230>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124e:	4b59      	ldr	r3, [pc, #356]	@ (80013b4 <MX_GPIO_Init+0x230>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001254:	4a57      	ldr	r2, [pc, #348]	@ (80013b4 <MX_GPIO_Init+0x230>)
 8001256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800125a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800125e:	4b55      	ldr	r3, [pc, #340]	@ (80013b4 <MX_GPIO_Init+0x230>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2110      	movs	r1, #16
 8001270:	4851      	ldr	r0, [pc, #324]	@ (80013b8 <MX_GPIO_Init+0x234>)
 8001272:	f000 ff45 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800127c:	484f      	ldr	r0, [pc, #316]	@ (80013bc <MX_GPIO_Init+0x238>)
 800127e:	f000 ff3f 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8001288:	484d      	ldr	r0, [pc, #308]	@ (80013c0 <MX_GPIO_Init+0x23c>)
 800128a:	f000 ff39 	bl	8002100 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001294:	4848      	ldr	r0, [pc, #288]	@ (80013b8 <MX_GPIO_Init+0x234>)
 8001296:	f000 ff33 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800129a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800129e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	4845      	ldr	r0, [pc, #276]	@ (80013c4 <MX_GPIO_Init+0x240>)
 80012b0:	f000 fd76 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5
 80012b4:	f643 73f1 	movw	r3, #16369	@ 0x3ff1
 80012b8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	483f      	ldr	r0, [pc, #252]	@ (80013c8 <MX_GPIO_Init+0x244>)
 80012ca:	f000 fd69 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 PF11 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80012ce:	f64c 73c0 	movw	r3, #53184	@ 0xcfc0
 80012d2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	483a      	ldr	r0, [pc, #232]	@ (80013cc <MX_GPIO_Init+0x248>)
 80012e4:	f000 fd5c 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012e8:	f248 030f 	movw	r3, #32783	@ 0x800f
 80012ec:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	482e      	ldr	r0, [pc, #184]	@ (80013b8 <MX_GPIO_Init+0x234>)
 80012fe:	f000 fd4f 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8001302:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4827      	ldr	r0, [pc, #156]	@ (80013b8 <MX_GPIO_Init+0x234>)
 800131c:	f000 fd40 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001320:	f241 33ff 	movw	r3, #5119	@ 0x13ff
 8001324:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4821      	ldr	r0, [pc, #132]	@ (80013bc <MX_GPIO_Init+0x238>)
 8001336:	f000 fd33 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800133a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	481a      	ldr	r0, [pc, #104]	@ (80013bc <MX_GPIO_Init+0x238>)
 8001354:	f000 fd24 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 PD11 PD12
                           PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001358:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800135c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	4813      	ldr	r0, [pc, #76]	@ (80013c0 <MX_GPIO_Init+0x23c>)
 8001372:	f000 fd15 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001376:	f248 23ff 	movw	r3, #33535	@ 0x82ff
 800137a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	480d      	ldr	r0, [pc, #52]	@ (80013c0 <MX_GPIO_Init+0x23c>)
 800138c:	f000 fd08 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 PG8 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001390:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001394:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	480a      	ldr	r0, [pc, #40]	@ (80013d0 <MX_GPIO_Init+0x24c>)
 80013a6:	f000 fcfb 	bl	8001da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	@ 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58020000 	.word	0x58020000
 80013bc:	58020400 	.word	0x58020400
 80013c0:	58020c00 	.word	0x58020c00
 80013c4:	58021000 	.word	0x58021000
 80013c8:	58020800 	.word	0x58020800
 80013cc:	58021400 	.word	0x58021400
 80013d0:	58021800 	.word	0x58021800

080013d4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80013e6:	f000 fc63 	bl	8001cb0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013ea:	2301      	movs	r3, #1
 80013ec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80013f6:	231f      	movs	r3, #31
 80013f8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80013fa:	2387      	movs	r3, #135	@ 0x87
 80013fc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80013fe:	2300      	movs	r3, #0
 8001400:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001402:	2300      	movs	r3, #0
 8001404:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001406:	2301      	movs	r3, #1
 8001408:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800140a:	2301      	movs	r3, #1
 800140c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001416:	463b      	mov	r3, r7
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fc81 	bl	8001d20 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800141e:	2004      	movs	r0, #4
 8001420:	f000 fc5e 	bl	8001ce0 <HAL_MPU_Enable>

}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <Error_Handler+0x8>

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <HAL_MspInit+0x30>)
 8001440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001444:	4a08      	ldr	r2, [pc, #32]	@ (8001468 <HAL_MspInit+0x30>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_MspInit+0x30>)
 8001450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	58024400 	.word	0x58024400

0800146c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0ba      	sub	sp, #232	@ 0xe8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	22c0      	movs	r2, #192	@ 0xc0
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f006 fa70 	bl	8007972 <memset>
  if(hi2c->Instance==I2C2)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a27      	ldr	r2, [pc, #156]	@ (8001534 <HAL_I2C_MspInit+0xc8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d146      	bne.n	800152a <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800149c:	f04f 0208 	mov.w	r2, #8
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fc52 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014be:	f7ff ffb5 	bl	800142c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <HAL_I2C_MspInit+0xcc>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001538 <HAL_I2C_MspInit+0xcc>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d2:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_I2C_MspInit+0xcc>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014e0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e8:	2312      	movs	r3, #18
 80014ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014fa:	2304      	movs	r3, #4
 80014fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001504:	4619      	mov	r1, r3
 8001506:	480d      	ldr	r0, [pc, #52]	@ (800153c <HAL_I2C_MspInit+0xd0>)
 8001508:	f000 fc4a 	bl	8001da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800150c:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_I2C_MspInit+0xcc>)
 800150e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001512:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <HAL_I2C_MspInit+0xcc>)
 8001514:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001518:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_I2C_MspInit+0xcc>)
 800151e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800152a:	bf00      	nop
 800152c:	37e8      	adds	r7, #232	@ 0xe8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40005800 	.word	0x40005800
 8001538:	58024400 	.word	0x58024400
 800153c:	58020400 	.word	0x58020400

08001540 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0be      	sub	sp, #248	@ 0xf8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	22c0      	movs	r2, #192	@ 0xc0
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f006 fa06 	bl	8007972 <memset>
  if(hspi->Instance==SPI1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a5f      	ldr	r2, [pc, #380]	@ (80016e8 <HAL_SPI_MspInit+0x1a8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d146      	bne.n	80015fe <HAL_SPI_MspInit+0xbe>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001570:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fbe8 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001592:	f7ff ff4b 	bl	800142c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001596:	4b55      	ldr	r3, [pc, #340]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 8001598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800159c:	4a53      	ldr	r2, [pc, #332]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 800159e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015a6:	4b51      	ldr	r3, [pc, #324]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 80015a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b4d      	ldr	r3, [pc, #308]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ba:	4a4c      	ldr	r2, [pc, #304]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015c4:	4b49      	ldr	r3, [pc, #292]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015d2:	23e0      	movs	r3, #224	@ 0xe0
 80015d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ea:	2305      	movs	r3, #5
 80015ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015f4:	4619      	mov	r1, r3
 80015f6:	483e      	ldr	r0, [pc, #248]	@ (80016f0 <HAL_SPI_MspInit+0x1b0>)
 80015f8:	f000 fbd2 	bl	8001da0 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015fc:	e06f      	b.n	80016de <HAL_SPI_MspInit+0x19e>
  else if(hspi->Instance==SPI2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a3c      	ldr	r2, [pc, #240]	@ (80016f4 <HAL_SPI_MspInit+0x1b4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d16a      	bne.n	80016de <HAL_SPI_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001608:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161a:	f107 0320 	add.w	r3, r7, #32
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fb9c 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_SPI_MspInit+0xee>
      Error_Handler();
 800162a:	f7ff feff 	bl	800142c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800162e:	4b2f      	ldr	r3, [pc, #188]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 8001630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001634:	4a2d      	ldr	r2, [pc, #180]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800163a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800163e:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 8001640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164c:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 800164e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001652:	4a26      	ldr	r2, [pc, #152]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800165c:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4b20      	ldr	r3, [pc, #128]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 800166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001670:	4a1e      	ldr	r2, [pc, #120]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <HAL_SPI_MspInit+0x1ac>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001688:	2302      	movs	r3, #2
 800168a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a0:	2305      	movs	r3, #5
 80016a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4812      	ldr	r0, [pc, #72]	@ (80016f8 <HAL_SPI_MspInit+0x1b8>)
 80016ae:	f000 fb77 	bl	8001da0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80016b2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80016b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016cc:	2305      	movs	r3, #5
 80016ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4808      	ldr	r0, [pc, #32]	@ (80016fc <HAL_SPI_MspInit+0x1bc>)
 80016da:	f000 fb61 	bl	8001da0 <HAL_GPIO_Init>
}
 80016de:	bf00      	nop
 80016e0:	37f8      	adds	r7, #248	@ 0xf8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40013000 	.word	0x40013000
 80016ec:	58024400 	.word	0x58024400
 80016f0:	58020000 	.word	0x58020000
 80016f4:	40003800 	.word	0x40003800
 80016f8:	58020800 	.word	0x58020800
 80016fc:	58020400 	.word	0x58020400

08001700 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0ba      	sub	sp, #232	@ 0xe8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	22c0      	movs	r2, #192	@ 0xc0
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f006 f926 	bl	8007972 <memset>
  if(huart->Instance==USART1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a27      	ldr	r2, [pc, #156]	@ (80017c8 <HAL_UART_MspInit+0xc8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d146      	bne.n	80017be <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001730:	f04f 0201 	mov.w	r2, #1
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fb08 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001752:	f7ff fe6b 	bl	800142c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001756:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <HAL_UART_MspInit+0xcc>)
 8001758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800175c:	4a1b      	ldr	r2, [pc, #108]	@ (80017cc <HAL_UART_MspInit+0xcc>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001766:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <HAL_UART_MspInit+0xcc>)
 8001768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_UART_MspInit+0xcc>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177a:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <HAL_UART_MspInit+0xcc>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <HAL_UART_MspInit+0xcc>)
 8001786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001792:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001796:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ac:	2307      	movs	r3, #7
 80017ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <HAL_UART_MspInit+0xd0>)
 80017ba:	f000 faf1 	bl	8001da0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80017be:	bf00      	nop
 80017c0:	37e8      	adds	r7, #232	@ 0xe8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40011000 	.word	0x40011000
 80017cc:	58024400 	.word	0x58024400
 80017d0:	58020000 	.word	0x58020000

080017d4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0ba      	sub	sp, #232	@ 0xe8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	22c0      	movs	r2, #192	@ 0xc0
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f006 f8bc 	bl	8007972 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a28      	ldr	r2, [pc, #160]	@ (80018a0 <HAL_PCD_MspInit+0xcc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d149      	bne.n	8001898 <HAL_PCD_MspInit+0xc4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001804:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001810:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4618      	mov	r0, r3
 800181e:	f002 fa9d 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001828:	f7ff fe00 	bl	800142c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800182c:	f001 faa0 	bl	8002d70 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <HAL_PCD_MspInit+0xd0>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001836:	4a1b      	ldr	r2, [pc, #108]	@ (80018a4 <HAL_PCD_MspInit+0xd0>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <HAL_PCD_MspInit+0xd0>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800184e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001868:	230a      	movs	r3, #10
 800186a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001872:	4619      	mov	r1, r3
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <HAL_PCD_MspInit+0xd4>)
 8001876:	f000 fa93 	bl	8001da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_PCD_MspInit+0xd0>)
 800187c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001880:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_PCD_MspInit+0xd0>)
 8001882:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001886:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_PCD_MspInit+0xd0>)
 800188c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001898:	bf00      	nop
 800189a:	37e8      	adds	r7, #232	@ 0xe8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40080000 	.word	0x40080000
 80018a4:	58024400 	.word	0x58024400
 80018a8:	58020000 	.word	0x58020000

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <NMI_Handler+0x4>

080018b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <MemManage_Handler+0x4>

080018c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001902:	f000 f8a1 	bl	8001a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800190c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001948 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001910:	f7fe ff26 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001914:	f7fe fe76 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001918:	480c      	ldr	r0, [pc, #48]	@ (800194c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800191a:	490d      	ldr	r1, [pc, #52]	@ (8001950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800191c:	4a0d      	ldr	r2, [pc, #52]	@ (8001954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001930:	4c0a      	ldr	r4, [pc, #40]	@ (800195c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800193e:	f006 f821 	bl	8007984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001942:	f7ff f871 	bl	8000a28 <main>
  bx  lr
 8001946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001948:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800194c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001950:	24000764 	.word	0x24000764
  ldr r2, =_sidata
 8001954:	08007a2c 	.word	0x08007a2c
  ldr r2, =_sbss
 8001958:	24000764 	.word	0x24000764
  ldr r4, =_ebss
 800195c:	24000ecc 	.word	0x24000ecc

08001960 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC3_IRQHandler>
	...

08001964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196a:	2003      	movs	r0, #3
 800196c:	f000 f96e 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001970:	f002 f81e 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <HAL_Init+0x68>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	4913      	ldr	r1, [pc, #76]	@ (80019d0 <HAL_Init+0x6c>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
 800198c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_Init+0x68>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4a0e      	ldr	r2, [pc, #56]	@ (80019d0 <HAL_Init+0x6c>)
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	4a0b      	ldr	r2, [pc, #44]	@ (80019d4 <HAL_Init+0x70>)
 80019a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019a8:	4a0b      	ldr	r2, [pc, #44]	@ (80019d8 <HAL_Init+0x74>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ae:	200f      	movs	r0, #15
 80019b0:	f000 f814 	bl	80019dc <HAL_InitTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e002      	b.n	80019c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019be:	f7ff fd3b 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024400 	.word	0x58024400
 80019d0:	080079e4 	.word	0x080079e4
 80019d4:	24000004 	.word	0x24000004
 80019d8:	24000000 	.word	0x24000000

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019e4:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_InitTick+0x60>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e021      	b.n	8001a34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <HAL_InitTick+0x64>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_InitTick+0x60>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f945 	bl	8001c96 <HAL_SYSTICK_Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00e      	b.n	8001a34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d80a      	bhi.n	8001a32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f000 f91d 	bl	8001c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a28:	4a06      	ldr	r2, [pc, #24]	@ (8001a44 <HAL_InitTick+0x68>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e000      	b.n	8001a34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	24000760 	.word	0x24000760
 8001a40:	24000000 	.word	0x24000000
 8001a44:	2400075c 	.word	0x2400075c

08001a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_IncTick+0x20>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_IncTick+0x24>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <HAL_IncTick+0x24>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	24000760 	.word	0x24000760
 8001a6c:	24000ec8 	.word	0x24000ec8

08001a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <HAL_GetTick+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	24000ec8 	.word	0x24000ec8

08001a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff ffee 	bl	8001a70 <HAL_GetTick>
 8001a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d005      	beq.n	8001aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <HAL_Delay+0x44>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aae:	bf00      	nop
 8001ab0:	f7ff ffde 	bl	8001a70 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d8f7      	bhi.n	8001ab0 <HAL_Delay+0x28>
  {
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	24000760 	.word	0x24000760

08001ad0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ad4:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <HAL_GetREVID+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0c1b      	lsrs	r3, r3, #16
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	5c001000 	.word	0x5c001000

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x40>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x40>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00
 8001b2c:	05fa0000 	.word	0x05fa0000

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	@ (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	@ 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c18:	d301      	bcc.n	8001c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00f      	b.n	8001c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <SysTick_Config+0x40>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c26:	210f      	movs	r1, #15
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f7ff ff8e 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <SysTick_Config+0x40>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c36:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <SysTick_Config+0x40>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff47 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff5e 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff90 	bl	8001ba0 <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5f 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffb2 	bl	8001c08 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001cb4:	f3bf 8f5f 	dmb	sy
}
 8001cb8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <HAL_MPU_Disable+0x28>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	4a06      	ldr	r2, [pc, #24]	@ (8001cd8 <HAL_MPU_Disable+0x28>)
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_MPU_Disable+0x2c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	605a      	str	r2, [r3, #4]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00
 8001cdc:	e000ed90 	.word	0xe000ed90

08001ce0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8001d18 <HAL_MPU_Enable+0x38>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <HAL_MPU_Enable+0x3c>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	4a09      	ldr	r2, [pc, #36]	@ (8001d1c <HAL_MPU_Enable+0x3c>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cfe:	f3bf 8f4f 	dsb	sy
}
 8001d02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d04:	f3bf 8f6f 	isb	sy
}
 8001d08:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed90 	.word	0xe000ed90
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	785a      	ldrb	r2, [r3, #1]
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_MPU_ConfigRegion+0x7c>)
 8001d2e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d30:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <HAL_MPU_ConfigRegion+0x7c>)
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <HAL_MPU_ConfigRegion+0x7c>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d3c:	4a17      	ldr	r2, [pc, #92]	@ (8001d9c <HAL_MPU_ConfigRegion+0x7c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7b1b      	ldrb	r3, [r3, #12]
 8001d48:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7adb      	ldrb	r3, [r3, #11]
 8001d4e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7a9b      	ldrb	r3, [r3, #10]
 8001d56:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7b5b      	ldrb	r3, [r3, #13]
 8001d5e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7b9b      	ldrb	r3, [r3, #14]
 8001d66:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7bdb      	ldrb	r3, [r3, #15]
 8001d6e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7a5b      	ldrb	r3, [r3, #9]
 8001d76:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7a1b      	ldrb	r3, [r3, #8]
 8001d7e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d80:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	7812      	ldrb	r2, [r2, #0]
 8001d86:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d88:	4a04      	ldr	r2, [pc, #16]	@ (8001d9c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d8a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d8c:	6113      	str	r3, [r2, #16]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed90 	.word	0xe000ed90

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	@ 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dae:	4b89      	ldr	r3, [pc, #548]	@ (8001fd4 <HAL_GPIO_Init+0x234>)
 8001db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001db2:	e194      	b.n	80020de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8186 	beq.w	80020d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d005      	beq.n	8001de4 <HAL_GPIO_Init+0x44>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d130      	bne.n	8001e46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 0201 	and.w	r2, r3, #1
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d017      	beq.n	8001e82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d123      	bne.n	8001ed6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	08da      	lsrs	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	69b9      	ldr	r1, [r7, #24]
 8001ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0203 	and.w	r2, r3, #3
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80e0 	beq.w	80020d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f18:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd8 <HAL_GPIO_Init+0x238>)
 8001f1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd8 <HAL_GPIO_Init+0x238>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f28:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <HAL_GPIO_Init+0x238>)
 8001f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f36:	4a29      	ldr	r2, [pc, #164]	@ (8001fdc <HAL_GPIO_Init+0x23c>)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a20      	ldr	r2, [pc, #128]	@ (8001fe0 <HAL_GPIO_Init+0x240>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d052      	beq.n	8002008 <HAL_GPIO_Init+0x268>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe4 <HAL_GPIO_Init+0x244>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d031      	beq.n	8001fce <HAL_GPIO_Init+0x22e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe8 <HAL_GPIO_Init+0x248>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d02b      	beq.n	8001fca <HAL_GPIO_Init+0x22a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1d      	ldr	r2, [pc, #116]	@ (8001fec <HAL_GPIO_Init+0x24c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d025      	beq.n	8001fc6 <HAL_GPIO_Init+0x226>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff0 <HAL_GPIO_Init+0x250>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01f      	beq.n	8001fc2 <HAL_GPIO_Init+0x222>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff4 <HAL_GPIO_Init+0x254>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d019      	beq.n	8001fbe <HAL_GPIO_Init+0x21e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ff8 <HAL_GPIO_Init+0x258>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_GPIO_Init+0x21a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a19      	ldr	r2, [pc, #100]	@ (8001ffc <HAL_GPIO_Init+0x25c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00d      	beq.n	8001fb6 <HAL_GPIO_Init+0x216>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a18      	ldr	r2, [pc, #96]	@ (8002000 <HAL_GPIO_Init+0x260>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <HAL_GPIO_Init+0x212>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <HAL_GPIO_Init+0x264>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <HAL_GPIO_Init+0x20e>
 8001faa:	2309      	movs	r3, #9
 8001fac:	e02d      	b.n	800200a <HAL_GPIO_Init+0x26a>
 8001fae:	230a      	movs	r3, #10
 8001fb0:	e02b      	b.n	800200a <HAL_GPIO_Init+0x26a>
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	e029      	b.n	800200a <HAL_GPIO_Init+0x26a>
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	e027      	b.n	800200a <HAL_GPIO_Init+0x26a>
 8001fba:	2306      	movs	r3, #6
 8001fbc:	e025      	b.n	800200a <HAL_GPIO_Init+0x26a>
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	e023      	b.n	800200a <HAL_GPIO_Init+0x26a>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e021      	b.n	800200a <HAL_GPIO_Init+0x26a>
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e01f      	b.n	800200a <HAL_GPIO_Init+0x26a>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e01d      	b.n	800200a <HAL_GPIO_Init+0x26a>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e01b      	b.n	800200a <HAL_GPIO_Init+0x26a>
 8001fd2:	bf00      	nop
 8001fd4:	58000080 	.word	0x58000080
 8001fd8:	58024400 	.word	0x58024400
 8001fdc:	58000400 	.word	0x58000400
 8001fe0:	58020000 	.word	0x58020000
 8001fe4:	58020400 	.word	0x58020400
 8001fe8:	58020800 	.word	0x58020800
 8001fec:	58020c00 	.word	0x58020c00
 8001ff0:	58021000 	.word	0x58021000
 8001ff4:	58021400 	.word	0x58021400
 8001ff8:	58021800 	.word	0x58021800
 8001ffc:	58021c00 	.word	0x58021c00
 8002000:	58022000 	.word	0x58022000
 8002004:	58022400 	.word	0x58022400
 8002008:	2300      	movs	r3, #0
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	f002 0203 	and.w	r2, r2, #3
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	4093      	lsls	r3, r2
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800201a:	4938      	ldr	r1, [pc, #224]	@ (80020fc <HAL_GPIO_Init+0x35c>)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800204e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800207c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	3301      	adds	r3, #1
 80020dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f ae63 	bne.w	8001db4 <HAL_GPIO_Init+0x14>
  }
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	3724      	adds	r7, #36	@ 0x24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	58000400 	.word	0x58000400

08002100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
 800210c:	4613      	mov	r3, r2
 800210e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002110:	787b      	ldrb	r3, [r7, #1]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800211c:	e003      	b.n	8002126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800211e:	887b      	ldrh	r3, [r7, #2]
 8002120:	041a      	lsls	r2, r3, #16
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	619a      	str	r2, [r3, #24]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800213c:	4a08      	ldr	r2, [pc, #32]	@ (8002160 <HAL_HSEM_FastTake+0x2c>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3320      	adds	r3, #32
 8002142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002146:	4a07      	ldr	r2, [pc, #28]	@ (8002164 <HAL_HSEM_FastTake+0x30>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	e000      	b.n	8002152 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	58026400 	.word	0x58026400
 8002164:	80000300 	.word	0x80000300

08002168 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002172:	4906      	ldr	r1, [pc, #24]	@ (800218c <HAL_HSEM_Release+0x24>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	58026400 	.word	0x58026400

08002190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e08b      	b.n	80022ba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff f958 	bl	800146c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	@ 0x24
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d107      	bne.n	800220a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	e006      	b.n	8002218 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002216:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d108      	bne.n	8002232 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	e007      	b.n	8002242 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002240:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <HAL_I2C_Init+0x134>)
 800224e:	430b      	orrs	r3, r1
 8002250:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002260:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69d9      	ldr	r1, [r3, #28]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1a      	ldr	r2, [r3, #32]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	02008000 	.word	0x02008000

080022c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	461a      	mov	r2, r3
 80022d4:	460b      	mov	r3, r1
 80022d6:	817b      	strh	r3, [r7, #10]
 80022d8:	4613      	mov	r3, r2
 80022da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	f040 80fd 	bne.w	80024e4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_I2C_Master_Transmit+0x30>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e0f6      	b.n	80024e6 <HAL_I2C_Master_Transmit+0x21e>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002300:	f7ff fbb6 	bl	8001a70 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2319      	movs	r3, #25
 800230c:	2201      	movs	r2, #1
 800230e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f914 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0e1      	b.n	80024e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2221      	movs	r2, #33	@ 0x21
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2210      	movs	r2, #16
 800232e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	893a      	ldrh	r2, [r7, #8]
 8002342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	2bff      	cmp	r3, #255	@ 0xff
 8002352:	d906      	bls.n	8002362 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	22ff      	movs	r2, #255	@ 0xff
 8002358:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800235a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	e007      	b.n	8002372 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800236c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002370:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002376:	2b00      	cmp	r3, #0
 8002378:	d024      	beq.n	80023c4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	8979      	ldrh	r1, [r7, #10]
 80023b6:	4b4e      	ldr	r3, [pc, #312]	@ (80024f0 <HAL_I2C_Master_Transmit+0x228>)
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 fa83 	bl	80028c8 <I2C_TransferConfig>
 80023c2:	e066      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	8979      	ldrh	r1, [r7, #10]
 80023cc:	4b48      	ldr	r3, [pc, #288]	@ (80024f0 <HAL_I2C_Master_Transmit+0x228>)
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fa78 	bl	80028c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023d8:	e05b      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	6a39      	ldr	r1, [r7, #32]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f907 	bl	80025f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07b      	b.n	80024e6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d034      	beq.n	8002492 <HAL_I2C_Master_Transmit+0x1ca>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	d130      	bne.n	8002492 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	2200      	movs	r2, #0
 8002438:	2180      	movs	r1, #128	@ 0x80
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f880 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e04d      	b.n	80024e6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	2bff      	cmp	r3, #255	@ 0xff
 8002452:	d90e      	bls.n	8002472 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	22ff      	movs	r2, #255	@ 0xff
 8002458:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245e:	b2da      	uxtb	r2, r3
 8002460:	8979      	ldrh	r1, [r7, #10]
 8002462:	2300      	movs	r3, #0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fa2c 	bl	80028c8 <I2C_TransferConfig>
 8002470:	e00f      	b.n	8002492 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002480:	b2da      	uxtb	r2, r3
 8002482:	8979      	ldrh	r1, [r7, #10]
 8002484:	2300      	movs	r3, #0
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fa1b 	bl	80028c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d19e      	bne.n	80023da <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	6a39      	ldr	r1, [r7, #32]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f8ed 	bl	8002680 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e01a      	b.n	80024e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2220      	movs	r2, #32
 80024b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <HAL_I2C_Master_Transmit+0x22c>)
 80024c4:	400b      	ands	r3, r1
 80024c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e000      	b.n	80024e6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
  }
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	80002000 	.word	0x80002000
 80024f4:	fe00e800 	.word	0xfe00e800

080024f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b02      	cmp	r3, #2
 800250c:	d103      	bne.n	8002516 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d007      	beq.n	8002534 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	619a      	str	r2, [r3, #24]
  }
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002550:	e03b      	b.n	80025ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	6839      	ldr	r1, [r7, #0]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f8d6 	bl	8002708 <I2C_IsErrorOccurred>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e041      	b.n	80025ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d02d      	beq.n	80025ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256e:	f7ff fa7f 	bl	8001a70 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d302      	bcc.n	8002584 <I2C_WaitOnFlagUntilTimeout+0x44>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d122      	bne.n	80025ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4013      	ands	r3, r2
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	429a      	cmp	r2, r3
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d113      	bne.n	80025ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	f043 0220 	orr.w	r2, r3, #32
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699a      	ldr	r2, [r3, #24]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4013      	ands	r3, r2
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	bf0c      	ite	eq
 80025da:	2301      	moveq	r3, #1
 80025dc:	2300      	movne	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d0b4      	beq.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025fe:	e033      	b.n	8002668 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f87f 	bl	8002708 <I2C_IsErrorOccurred>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e031      	b.n	8002678 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261a:	d025      	beq.n	8002668 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261c:	f7ff fa28 	bl	8001a70 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	429a      	cmp	r2, r3
 800262a:	d302      	bcc.n	8002632 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11a      	bne.n	8002668 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d013      	beq.n	8002668 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e007      	b.n	8002678 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d1c4      	bne.n	8002600 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800268c:	e02f      	b.n	80026ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f838 	bl	8002708 <I2C_IsErrorOccurred>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e02d      	b.n	80026fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a2:	f7ff f9e5 	bl	8001a70 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d11a      	bne.n	80026ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d013      	beq.n	80026ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e007      	b.n	80026fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d1c8      	bne.n	800268e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	@ 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	d068      	beq.n	8002806 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2210      	movs	r2, #16
 800273a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800273c:	e049      	b.n	80027d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d045      	beq.n	80027d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002746:	f7ff f993 	bl	8001a70 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	429a      	cmp	r2, r3
 8002754:	d302      	bcc.n	800275c <I2C_IsErrorOccurred+0x54>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d13a      	bne.n	80027d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002766:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800276e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800277a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800277e:	d121      	bne.n	80027c4 <I2C_IsErrorOccurred+0xbc>
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002786:	d01d      	beq.n	80027c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	2b20      	cmp	r3, #32
 800278c:	d01a      	beq.n	80027c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800279c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800279e:	f7ff f967 	bl	8001a70 <HAL_GetTick>
 80027a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027a4:	e00e      	b.n	80027c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027a6:	f7ff f963 	bl	8001a70 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b19      	cmp	r3, #25
 80027b2:	d907      	bls.n	80027c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f043 0320 	orr.w	r3, r3, #32
 80027ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80027c2:	e006      	b.n	80027d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d1e9      	bne.n	80027a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d003      	beq.n	80027e8 <I2C_IsErrorOccurred+0xe0>
 80027e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0aa      	beq.n	800273e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2220      	movs	r2, #32
 80027f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002828:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800284a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f043 0302 	orr.w	r3, r3, #2
 8002862:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800286c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01c      	beq.n	80028b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff fe3b 	bl	80024f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <I2C_IsErrorOccurred+0x1bc>)
 800288e:	400b      	ands	r3, r1
 8002890:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	431a      	orrs	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80028b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3728      	adds	r7, #40	@ 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	fe00e800 	.word	0xfe00e800

080028c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	817b      	strh	r3, [r7, #10]
 80028d6:	4613      	mov	r3, r2
 80028d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028da:	897b      	ldrh	r3, [r7, #10]
 80028dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028e0:	7a7b      	ldrb	r3, [r7, #9]
 80028e2:	041b      	lsls	r3, r3, #16
 80028e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028e8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028f6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	0d5b      	lsrs	r3, r3, #21
 8002902:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002906:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <I2C_TransferConfig+0x60>)
 8002908:	430b      	orrs	r3, r1
 800290a:	43db      	mvns	r3, r3
 800290c:	ea02 0103 	and.w	r1, r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	03ff63ff 	.word	0x03ff63ff

0800292c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b20      	cmp	r3, #32
 8002940:	d138      	bne.n	80029b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800294c:	2302      	movs	r3, #2
 800294e:	e032      	b.n	80029b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2224      	movs	r2, #36	@ 0x24
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800297e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6819      	ldr	r1, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e000      	b.n	80029b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d139      	bne.n	8002a4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e033      	b.n	8002a4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2224      	movs	r2, #36	@ 0x24
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0fe      	b.n	8002c6a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d106      	bne.n	8002a86 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7fe fea7 	bl	80017d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2203      	movs	r2, #3
 8002a8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f004 fcd8 	bl	8007448 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7c1a      	ldrb	r2, [r3, #16]
 8002aa0:	f88d 2000 	strb.w	r2, [sp]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa8:	f004 fc5c 	bl	8007364 <USB_CoreInit>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0d5      	b.n	8002c6a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 fcd0 	bl	800746a <USB_SetCurrentMode>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0c6      	b.n	8002c6a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	e04a      	b.n	8002b78 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3315      	adds	r3, #21
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3314      	adds	r3, #20
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	b298      	uxth	r0, r3
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	332e      	adds	r3, #46	@ 0x2e
 8002b1e:	4602      	mov	r2, r0
 8002b20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3318      	adds	r3, #24
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	331c      	adds	r3, #28
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	3320      	adds	r3, #32
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3324      	adds	r3, #36	@ 0x24
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	3301      	adds	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	791b      	ldrb	r3, [r3, #4]
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d3af      	bcc.n	8002ae2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	e044      	b.n	8002c12 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	791b      	ldrb	r3, [r3, #4]
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d3b5      	bcc.n	8002b88 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7c1a      	ldrb	r2, [r3, #16]
 8002c24:	f88d 2000 	strb.w	r2, [sp]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c2c:	f004 fc6a 	bl	8007504 <USB_DevInit>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e013      	b.n	8002c6a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7b1b      	ldrb	r3, [r3, #12]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d102      	bne.n	8002c5e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f80b 	bl	8002c74 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 fe25 	bl	80078b2 <USB_DevDisconnect>

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ca2:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	10000003 	.word	0x10000003

08002cbc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002cc4:	4b29      	ldr	r3, [pc, #164]	@ (8002d6c <HAL_PWREx_ConfigSupply+0xb0>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	2b06      	cmp	r3, #6
 8002cce:	d00a      	beq.n	8002ce6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cd0:	4b26      	ldr	r3, [pc, #152]	@ (8002d6c <HAL_PWREx_ConfigSupply+0xb0>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d001      	beq.n	8002ce2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e040      	b.n	8002d64 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e03e      	b.n	8002d64 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ce6:	4b21      	ldr	r3, [pc, #132]	@ (8002d6c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002cee:	491f      	ldr	r1, [pc, #124]	@ (8002d6c <HAL_PWREx_ConfigSupply+0xb0>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002cf6:	f7fe febb 	bl	8001a70 <HAL_GetTick>
 8002cfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cfc:	e009      	b.n	8002d12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cfe:	f7fe feb7 	bl	8001a70 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d0c:	d901      	bls.n	8002d12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e028      	b.n	8002d64 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d12:	4b16      	ldr	r3, [pc, #88]	@ (8002d6c <HAL_PWREx_ConfigSupply+0xb0>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d1e:	d1ee      	bne.n	8002cfe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b1e      	cmp	r3, #30
 8002d24:	d008      	beq.n	8002d38 <HAL_PWREx_ConfigSupply+0x7c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d2a:	d005      	beq.n	8002d38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b1d      	cmp	r3, #29
 8002d30:	d002      	beq.n	8002d38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b2d      	cmp	r3, #45	@ 0x2d
 8002d36:	d114      	bne.n	8002d62 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002d38:	f7fe fe9a 	bl	8001a70 <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d3e:	e009      	b.n	8002d54 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d40:	f7fe fe96 	bl	8001a70 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d4e:	d901      	bls.n	8002d54 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e007      	b.n	8002d64 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d54:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <HAL_PWREx_ConfigSupply+0xb0>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d60:	d1ee      	bne.n	8002d40 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	58024800 	.word	0x58024800

08002d70 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a04      	ldr	r2, [pc, #16]	@ (8002d8c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	58024800 	.word	0x58024800

08002d90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08c      	sub	sp, #48	@ 0x30
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f000 bc48 	b.w	8003634 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8088 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	4b99      	ldr	r3, [pc, #612]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dbc:	4b96      	ldr	r3, [pc, #600]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d007      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x48>
 8002dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dca:	2b18      	cmp	r3, #24
 8002dcc:	d111      	bne.n	8002df2 <HAL_RCC_OscConfig+0x62>
 8002dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d10c      	bne.n	8002df2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	4b8f      	ldr	r3, [pc, #572]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d06d      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x130>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d169      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f000 bc21 	b.w	8003634 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCC_OscConfig+0x7a>
 8002dfc:	4b86      	ldr	r3, [pc, #536]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a85      	ldr	r2, [pc, #532]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	e02e      	b.n	8002e68 <HAL_RCC_OscConfig+0xd8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x9c>
 8002e12:	4b81      	ldr	r3, [pc, #516]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a80      	ldr	r2, [pc, #512]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	4b7e      	ldr	r3, [pc, #504]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7d      	ldr	r2, [pc, #500]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0xd8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0xc0>
 8002e36:	4b78      	ldr	r3, [pc, #480]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a77      	ldr	r2, [pc, #476]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b75      	ldr	r3, [pc, #468]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a74      	ldr	r2, [pc, #464]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0xd8>
 8002e50:	4b71      	ldr	r3, [pc, #452]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a70      	ldr	r2, [pc, #448]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b6e      	ldr	r3, [pc, #440]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6d      	ldr	r2, [pc, #436]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe fdfe 	bl	8001a70 <HAL_GetTick>
 8002e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe fdfa 	bl	8001a70 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	@ 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e3d4      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e8a:	4b63      	ldr	r3, [pc, #396]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0xe8>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fdea 	bl	8001a70 <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fe fde6 	bl	8001a70 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e3c0      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eb2:	4b59      	ldr	r3, [pc, #356]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x110>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80ca 	beq.w	8003064 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed0:	4b51      	ldr	r3, [pc, #324]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ed8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eda:	4b4f      	ldr	r3, [pc, #316]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x166>
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	2b18      	cmp	r3, #24
 8002eea:	d156      	bne.n	8002f9a <HAL_RCC_OscConfig+0x20a>
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d151      	bne.n	8002f9a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef6:	4b48      	ldr	r3, [pc, #288]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_RCC_OscConfig+0x17e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e392      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f0e:	4b42      	ldr	r3, [pc, #264]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 0219 	bic.w	r2, r3, #25
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	493f      	ldr	r1, [pc, #252]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe fda6 	bl	8001a70 <HAL_GetTick>
 8002f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fe fda2 	bl	8001a70 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e37c      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f3a:	4b37      	ldr	r3, [pc, #220]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	f7fe fdc3 	bl	8001ad0 <HAL_GetREVID>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d817      	bhi.n	8002f84 <HAL_RCC_OscConfig+0x1f4>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	d108      	bne.n	8002f6e <HAL_RCC_OscConfig+0x1de>
 8002f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f64:	4a2c      	ldr	r2, [pc, #176]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002f66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f6a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f6c:	e07a      	b.n	8003064 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	031b      	lsls	r3, r3, #12
 8002f7c:	4926      	ldr	r1, [pc, #152]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f82:	e06f      	b.n	8003064 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4b24      	ldr	r3, [pc, #144]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	061b      	lsls	r3, r3, #24
 8002f92:	4921      	ldr	r1, [pc, #132]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f98:	e064      	b.n	8003064 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d047      	beq.n	8003032 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 0219 	bic.w	r2, r3, #25
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	491a      	ldr	r1, [pc, #104]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fd5c 	bl	8001a70 <HAL_GetTick>
 8002fb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbc:	f7fe fd58 	bl	8001a70 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e332      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fce:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fda:	f7fe fd79 	bl	8001ad0 <HAL_GetREVID>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d819      	bhi.n	800301c <HAL_RCC_OscConfig+0x28c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d108      	bne.n	8003002 <HAL_RCC_OscConfig+0x272>
 8002ff0:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002ff8:	4a07      	ldr	r2, [pc, #28]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8002ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ffe:	6053      	str	r3, [r2, #4]
 8003000:	e030      	b.n	8003064 <HAL_RCC_OscConfig+0x2d4>
 8003002:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	031b      	lsls	r3, r3, #12
 8003010:	4901      	ldr	r1, [pc, #4]	@ (8003018 <HAL_RCC_OscConfig+0x288>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
 8003016:	e025      	b.n	8003064 <HAL_RCC_OscConfig+0x2d4>
 8003018:	58024400 	.word	0x58024400
 800301c:	4b9a      	ldr	r3, [pc, #616]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	4997      	ldr	r1, [pc, #604]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
 8003030:	e018      	b.n	8003064 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b95      	ldr	r3, [pc, #596]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a94      	ldr	r2, [pc, #592]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fd17 	bl	8001a70 <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7fe fd13 	bl	8001a70 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e2ed      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003058:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f0      	bne.n	8003046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80a9 	beq.w	80031c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003072:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800307a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800307c:	4b82      	ldr	r3, [pc, #520]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d007      	beq.n	8003098 <HAL_RCC_OscConfig+0x308>
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b18      	cmp	r3, #24
 800308c:	d13a      	bne.n	8003104 <HAL_RCC_OscConfig+0x374>
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d135      	bne.n	8003104 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003098:	4b7b      	ldr	r3, [pc, #492]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x320>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b80      	cmp	r3, #128	@ 0x80
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e2c1      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030b0:	f7fe fd0e 	bl	8001ad0 <HAL_GetREVID>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d817      	bhi.n	80030ee <HAL_RCC_OscConfig+0x35e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d108      	bne.n	80030d8 <HAL_RCC_OscConfig+0x348>
 80030c6:	4b70      	ldr	r3, [pc, #448]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80030ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 80030d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030d6:	e075      	b.n	80031c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	069b      	lsls	r3, r3, #26
 80030e6:	4968      	ldr	r1, [pc, #416]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030ec:	e06a      	b.n	80031c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030ee:	4b66      	ldr	r3, [pc, #408]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	061b      	lsls	r3, r3, #24
 80030fc:	4962      	ldr	r1, [pc, #392]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003102:	e05f      	b.n	80031c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d042      	beq.n	8003192 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800310c:	4b5e      	ldr	r3, [pc, #376]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a5d      	ldr	r2, [pc, #372]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe fcaa 	bl	8001a70 <HAL_GetTick>
 800311c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003120:	f7fe fca6 	bl	8001a70 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e280      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003132:	4b55      	ldr	r3, [pc, #340]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800313e:	f7fe fcc7 	bl	8001ad0 <HAL_GetREVID>
 8003142:	4603      	mov	r3, r0
 8003144:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003148:	4293      	cmp	r3, r2
 800314a:	d817      	bhi.n	800317c <HAL_RCC_OscConfig+0x3ec>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	2b20      	cmp	r3, #32
 8003152:	d108      	bne.n	8003166 <HAL_RCC_OscConfig+0x3d6>
 8003154:	4b4c      	ldr	r3, [pc, #304]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800315c:	4a4a      	ldr	r2, [pc, #296]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 800315e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003162:	6053      	str	r3, [r2, #4]
 8003164:	e02e      	b.n	80031c4 <HAL_RCC_OscConfig+0x434>
 8003166:	4b48      	ldr	r3, [pc, #288]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	069b      	lsls	r3, r3, #26
 8003174:	4944      	ldr	r1, [pc, #272]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
 800317a:	e023      	b.n	80031c4 <HAL_RCC_OscConfig+0x434>
 800317c:	4b42      	ldr	r3, [pc, #264]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	493f      	ldr	r1, [pc, #252]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 800318c:	4313      	orrs	r3, r2
 800318e:	60cb      	str	r3, [r1, #12]
 8003190:	e018      	b.n	80031c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003192:	4b3d      	ldr	r3, [pc, #244]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a3c      	ldr	r2, [pc, #240]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800319c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe fc67 	bl	8001a70 <HAL_GetTick>
 80031a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031a6:	f7fe fc63 	bl	8001a70 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e23d      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031b8:	4b33      	ldr	r3, [pc, #204]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d036      	beq.n	800323e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d019      	beq.n	800320c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe fc44 	bl	8001a70 <HAL_GetTick>
 80031e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ec:	f7fe fc40 	bl	8001a70 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e21a      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031fe:	4b22      	ldr	r3, [pc, #136]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x45c>
 800320a:	e018      	b.n	800323e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320c:	4b1e      	ldr	r3, [pc, #120]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 800320e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003210:	4a1d      	ldr	r2, [pc, #116]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe fc2a 	bl	8001a70 <HAL_GetTick>
 800321c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003220:	f7fe fc26 	bl	8001a70 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e200      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003232:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d039      	beq.n	80032be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01c      	beq.n	800328c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003252:	4b0d      	ldr	r3, [pc, #52]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a0c      	ldr	r2, [pc, #48]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 8003258:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800325c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800325e:	f7fe fc07 	bl	8001a70 <HAL_GetTick>
 8003262:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003266:	f7fe fc03 	bl	8001a70 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e1dd      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003278:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <HAL_RCC_OscConfig+0x4f8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x4d6>
 8003284:	e01b      	b.n	80032be <HAL_RCC_OscConfig+0x52e>
 8003286:	bf00      	nop
 8003288:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800328c:	4b9b      	ldr	r3, [pc, #620]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a9a      	ldr	r2, [pc, #616]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003296:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003298:	f7fe fbea 	bl	8001a70 <HAL_GetTick>
 800329c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032a0:	f7fe fbe6 	bl	8001a70 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e1c0      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032b2:	4b92      	ldr	r3, [pc, #584]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8081 	beq.w	80033ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003500 <HAL_RCC_OscConfig+0x770>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a8b      	ldr	r2, [pc, #556]	@ (8003500 <HAL_RCC_OscConfig+0x770>)
 80032d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032d8:	f7fe fbca 	bl	8001a70 <HAL_GetTick>
 80032dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e0:	f7fe fbc6 	bl	8001a70 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	@ 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e1a0      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032f2:	4b83      	ldr	r3, [pc, #524]	@ (8003500 <HAL_RCC_OscConfig+0x770>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x584>
 8003306:	4b7d      	ldr	r3, [pc, #500]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330a:	4a7c      	ldr	r2, [pc, #496]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	@ 0x70
 8003312:	e02d      	b.n	8003370 <HAL_RCC_OscConfig+0x5e0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10c      	bne.n	8003336 <HAL_RCC_OscConfig+0x5a6>
 800331c:	4b77      	ldr	r3, [pc, #476]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	4a76      	ldr	r2, [pc, #472]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	@ 0x70
 8003328:	4b74      	ldr	r3, [pc, #464]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332c:	4a73      	ldr	r2, [pc, #460]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 800332e:	f023 0304 	bic.w	r3, r3, #4
 8003332:	6713      	str	r3, [r2, #112]	@ 0x70
 8003334:	e01c      	b.n	8003370 <HAL_RCC_OscConfig+0x5e0>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b05      	cmp	r3, #5
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x5c8>
 800333e:	4b6f      	ldr	r3, [pc, #444]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	4a6e      	ldr	r2, [pc, #440]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003344:	f043 0304 	orr.w	r3, r3, #4
 8003348:	6713      	str	r3, [r2, #112]	@ 0x70
 800334a:	4b6c      	ldr	r3, [pc, #432]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334e:	4a6b      	ldr	r2, [pc, #428]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	@ 0x70
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0x5e0>
 8003358:	4b68      	ldr	r3, [pc, #416]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335c:	4a67      	ldr	r2, [pc, #412]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	6713      	str	r3, [r2, #112]	@ 0x70
 8003364:	4b65      	ldr	r3, [pc, #404]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003368:	4a64      	ldr	r2, [pc, #400]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 800336a:	f023 0304 	bic.w	r3, r3, #4
 800336e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d015      	beq.n	80033a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fe fb7a 	bl	8001a70 <HAL_GetTick>
 800337c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800337e:	e00a      	b.n	8003396 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003380:	f7fe fb76 	bl	8001a70 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e14e      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003396:	4b59      	ldr	r3, [pc, #356]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0ee      	beq.n	8003380 <HAL_RCC_OscConfig+0x5f0>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fe fb64 	bl	8001a70 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ac:	f7fe fb60 	bl	8001a70 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e138      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033c2:	4b4e      	ldr	r3, [pc, #312]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ee      	bne.n	80033ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 812d 	beq.w	8003632 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033d8:	4b48      	ldr	r3, [pc, #288]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033e0:	2b18      	cmp	r3, #24
 80033e2:	f000 80bd 	beq.w	8003560 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	f040 809e 	bne.w	800352c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f0:	4b42      	ldr	r3, [pc, #264]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a41      	ldr	r2, [pc, #260]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80033f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe fb38 	bl	8001a70 <HAL_GetTick>
 8003400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fe fb34 	bl	8001a70 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e10e      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003416:	4b39      	ldr	r3, [pc, #228]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003422:	4b36      	ldr	r3, [pc, #216]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003424:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003426:	4b37      	ldr	r3, [pc, #220]	@ (8003504 <HAL_RCC_OscConfig+0x774>)
 8003428:	4013      	ands	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003432:	0112      	lsls	r2, r2, #4
 8003434:	430a      	orrs	r2, r1
 8003436:	4931      	ldr	r1, [pc, #196]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003438:	4313      	orrs	r3, r2
 800343a:	628b      	str	r3, [r1, #40]	@ 0x28
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003440:	3b01      	subs	r3, #1
 8003442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344a:	3b01      	subs	r3, #1
 800344c:	025b      	lsls	r3, r3, #9
 800344e:	b29b      	uxth	r3, r3
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003456:	3b01      	subs	r3, #1
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003464:	3b01      	subs	r3, #1
 8003466:	061b      	lsls	r3, r3, #24
 8003468:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800346c:	4923      	ldr	r1, [pc, #140]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 800346e:	4313      	orrs	r3, r2
 8003470:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003472:	4b22      	ldr	r3, [pc, #136]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	4a21      	ldr	r2, [pc, #132]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800347e:	4b1f      	ldr	r3, [pc, #124]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003482:	4b21      	ldr	r3, [pc, #132]	@ (8003508 <HAL_RCC_OscConfig+0x778>)
 8003484:	4013      	ands	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800348a:	00d2      	lsls	r2, r2, #3
 800348c:	491b      	ldr	r1, [pc, #108]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 800348e:	4313      	orrs	r3, r2
 8003490:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003492:	4b1a      	ldr	r3, [pc, #104]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	f023 020c 	bic.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	4917      	ldr	r1, [pc, #92]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034a4:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	f023 0202 	bic.w	r2, r3, #2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b0:	4912      	ldr	r1, [pc, #72]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034b6:	4b11      	ldr	r3, [pc, #68]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ba:	4a10      	ldr	r2, [pc, #64]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c2:	4b0e      	ldr	r3, [pc, #56]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	4a0d      	ldr	r2, [pc, #52]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034ce:	4b0b      	ldr	r3, [pc, #44]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	4a0a      	ldr	r2, [pc, #40]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80034da:	4b08      	ldr	r3, [pc, #32]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	4a07      	ldr	r2, [pc, #28]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a04      	ldr	r2, [pc, #16]	@ (80034fc <HAL_RCC_OscConfig+0x76c>)
 80034ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fe fabd 	bl	8001a70 <HAL_GetTick>
 80034f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034f8:	e011      	b.n	800351e <HAL_RCC_OscConfig+0x78e>
 80034fa:	bf00      	nop
 80034fc:	58024400 	.word	0x58024400
 8003500:	58024800 	.word	0x58024800
 8003504:	fffffc0c 	.word	0xfffffc0c
 8003508:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fe fab0 	bl	8001a70 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e08a      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800351e:	4b47      	ldr	r3, [pc, #284]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x77c>
 800352a:	e082      	b.n	8003632 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352c:	4b43      	ldr	r3, [pc, #268]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a42      	ldr	r2, [pc, #264]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 8003532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe fa9a 	bl	8001a70 <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003540:	f7fe fa96 	bl	8001a70 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e070      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003552:	4b3a      	ldr	r3, [pc, #232]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x7b0>
 800355e:	e068      	b.n	8003632 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003560:	4b36      	ldr	r3, [pc, #216]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003566:	4b35      	ldr	r3, [pc, #212]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	2b01      	cmp	r3, #1
 8003572:	d031      	beq.n	80035d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f003 0203 	and.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d12a      	bne.n	80035d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d122      	bne.n	80035d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d11a      	bne.n	80035d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	0a5b      	lsrs	r3, r3, #9
 80035a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d111      	bne.n	80035d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	0c1b      	lsrs	r3, r3, #16
 80035b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d108      	bne.n	80035d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	0e1b      	lsrs	r3, r3, #24
 80035ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e02b      	b.n	8003634 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80035dc:	4b17      	ldr	r3, [pc, #92]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 80035de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d01f      	beq.n	8003632 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80035f2:	4b12      	ldr	r3, [pc, #72]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 80035f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f6:	4a11      	ldr	r2, [pc, #68]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035fe:	f7fe fa37 	bl	8001a70 <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003604:	bf00      	nop
 8003606:	f7fe fa33 	bl	8001a70 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	4293      	cmp	r3, r2
 8003610:	d0f9      	beq.n	8003606 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003612:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 8003614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003616:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <HAL_RCC_OscConfig+0x8b0>)
 8003618:	4013      	ands	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800361e:	00d2      	lsls	r2, r2, #3
 8003620:	4906      	ldr	r1, [pc, #24]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 8003622:	4313      	orrs	r3, r2
 8003624:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003626:	4b05      	ldr	r3, [pc, #20]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	4a04      	ldr	r2, [pc, #16]	@ (800363c <HAL_RCC_OscConfig+0x8ac>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3730      	adds	r7, #48	@ 0x30
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	58024400 	.word	0x58024400
 8003640:	ffff0007 	.word	0xffff0007

08003644 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e19c      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b8a      	ldr	r3, [pc, #552]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d910      	bls.n	8003688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b87      	ldr	r3, [pc, #540]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 020f 	bic.w	r2, r3, #15
 800366e:	4985      	ldr	r1, [pc, #532]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b83      	ldr	r3, [pc, #524]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e184      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d010      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	4b7b      	ldr	r3, [pc, #492]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d908      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036a4:	4b78      	ldr	r3, [pc, #480]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	4975      	ldr	r1, [pc, #468]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d010      	beq.n	80036e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	4b70      	ldr	r3, [pc, #448]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d908      	bls.n	80036e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	496a      	ldr	r1, [pc, #424]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d010      	beq.n	8003712 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	4b64      	ldr	r3, [pc, #400]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d908      	bls.n	8003712 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003700:	4b61      	ldr	r3, [pc, #388]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	495e      	ldr	r1, [pc, #376]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 800370e:	4313      	orrs	r3, r2
 8003710:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d010      	beq.n	8003740 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	4b59      	ldr	r3, [pc, #356]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800372a:	429a      	cmp	r2, r3
 800372c:	d908      	bls.n	8003740 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800372e:	4b56      	ldr	r3, [pc, #344]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4953      	ldr	r1, [pc, #332]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 800373c:	4313      	orrs	r3, r2
 800373e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d010      	beq.n	800376e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	4b4d      	ldr	r3, [pc, #308]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	429a      	cmp	r2, r3
 800375a:	d908      	bls.n	800376e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b4a      	ldr	r3, [pc, #296]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f023 020f 	bic.w	r2, r3, #15
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4947      	ldr	r1, [pc, #284]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 800376a:	4313      	orrs	r3, r2
 800376c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d055      	beq.n	8003826 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800377a:	4b43      	ldr	r3, [pc, #268]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	4940      	ldr	r1, [pc, #256]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003788:	4313      	orrs	r3, r2
 800378a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003794:	4b3c      	ldr	r3, [pc, #240]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d121      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0f6      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037ac:	4b36      	ldr	r3, [pc, #216]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d115      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0ea      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037c4:	4b30      	ldr	r3, [pc, #192]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0de      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0d6      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037e4:	4b28      	ldr	r3, [pc, #160]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f023 0207 	bic.w	r2, r3, #7
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4925      	ldr	r1, [pc, #148]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f6:	f7fe f93b 	bl	8001a70 <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fe:	f7fe f937 	bl	8001a70 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0be      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003814:	4b1c      	ldr	r3, [pc, #112]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	429a      	cmp	r2, r3
 8003824:	d1eb      	bne.n	80037fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d010      	beq.n	8003854 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	4b14      	ldr	r3, [pc, #80]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	429a      	cmp	r2, r3
 8003840:	d208      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003842:	4b11      	ldr	r3, [pc, #68]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f023 020f 	bic.w	r2, r3, #15
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	490e      	ldr	r1, [pc, #56]	@ (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003850:	4313      	orrs	r3, r2
 8003852:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003854:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d214      	bcs.n	800388c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b08      	ldr	r3, [pc, #32]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 020f 	bic.w	r2, r3, #15
 800386a:	4906      	ldr	r1, [pc, #24]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e086      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
 8003884:	52002000 	.word	0x52002000
 8003888:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	4b3f      	ldr	r3, [pc, #252]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d208      	bcs.n	80038ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038a8:	4b3c      	ldr	r3, [pc, #240]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	4939      	ldr	r1, [pc, #228]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d010      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	4b34      	ldr	r3, [pc, #208]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d208      	bcs.n	80038e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038d6:	4b31      	ldr	r3, [pc, #196]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	492e      	ldr	r1, [pc, #184]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d010      	beq.n	8003916 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	4b28      	ldr	r3, [pc, #160]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003900:	429a      	cmp	r2, r3
 8003902:	d208      	bcs.n	8003916 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003904:	4b25      	ldr	r3, [pc, #148]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	4922      	ldr	r1, [pc, #136]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 8003912:	4313      	orrs	r3, r2
 8003914:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d010      	beq.n	8003944 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	4b1d      	ldr	r3, [pc, #116]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800392e:	429a      	cmp	r2, r3
 8003930:	d208      	bcs.n	8003944 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003932:	4b1a      	ldr	r3, [pc, #104]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	4917      	ldr	r1, [pc, #92]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 8003940:	4313      	orrs	r3, r2
 8003942:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003944:	f000 f834 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b14      	ldr	r3, [pc, #80]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	4912      	ldr	r1, [pc, #72]	@ (80039a0 <HAL_RCC_ClockConfig+0x35c>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003962:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <HAL_RCC_ClockConfig+0x358>)
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	4a0d      	ldr	r2, [pc, #52]	@ (80039a0 <HAL_RCC_ClockConfig+0x35c>)
 800396c:	5cd3      	ldrb	r3, [r2, r3]
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	4a0a      	ldr	r2, [pc, #40]	@ (80039a4 <HAL_RCC_ClockConfig+0x360>)
 800397a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800397c:	4a0a      	ldr	r2, [pc, #40]	@ (80039a8 <HAL_RCC_ClockConfig+0x364>)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003982:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <HAL_RCC_ClockConfig+0x368>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe f828 	bl	80019dc <HAL_InitTick>
 800398c:	4603      	mov	r3, r0
 800398e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	58024400 	.word	0x58024400
 80039a0:	080079e4 	.word	0x080079e4
 80039a4:	24000004 	.word	0x24000004
 80039a8:	24000000 	.word	0x24000000
 80039ac:	2400075c 	.word	0x2400075c

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	@ 0x24
 80039b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b6:	4bb3      	ldr	r3, [pc, #716]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039be:	2b18      	cmp	r3, #24
 80039c0:	f200 8155 	bhi.w	8003c6e <HAL_RCC_GetSysClockFreq+0x2be>
 80039c4:	a201      	add	r2, pc, #4	@ (adr r2, 80039cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	08003a31 	.word	0x08003a31
 80039d0:	08003c6f 	.word	0x08003c6f
 80039d4:	08003c6f 	.word	0x08003c6f
 80039d8:	08003c6f 	.word	0x08003c6f
 80039dc:	08003c6f 	.word	0x08003c6f
 80039e0:	08003c6f 	.word	0x08003c6f
 80039e4:	08003c6f 	.word	0x08003c6f
 80039e8:	08003c6f 	.word	0x08003c6f
 80039ec:	08003a57 	.word	0x08003a57
 80039f0:	08003c6f 	.word	0x08003c6f
 80039f4:	08003c6f 	.word	0x08003c6f
 80039f8:	08003c6f 	.word	0x08003c6f
 80039fc:	08003c6f 	.word	0x08003c6f
 8003a00:	08003c6f 	.word	0x08003c6f
 8003a04:	08003c6f 	.word	0x08003c6f
 8003a08:	08003c6f 	.word	0x08003c6f
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	08003c6f 	.word	0x08003c6f
 8003a14:	08003c6f 	.word	0x08003c6f
 8003a18:	08003c6f 	.word	0x08003c6f
 8003a1c:	08003c6f 	.word	0x08003c6f
 8003a20:	08003c6f 	.word	0x08003c6f
 8003a24:	08003c6f 	.word	0x08003c6f
 8003a28:	08003c6f 	.word	0x08003c6f
 8003a2c:	08003a63 	.word	0x08003a63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a30:	4b94      	ldr	r3, [pc, #592]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d009      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a3c:	4b91      	ldr	r3, [pc, #580]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	08db      	lsrs	r3, r3, #3
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	4a90      	ldr	r2, [pc, #576]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a4e:	e111      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a50:	4b8d      	ldr	r3, [pc, #564]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a52:	61bb      	str	r3, [r7, #24]
      break;
 8003a54:	e10e      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a56:	4b8d      	ldr	r3, [pc, #564]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a58:	61bb      	str	r3, [r7, #24]
      break;
 8003a5a:	e10b      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a5e:	61bb      	str	r3, [r7, #24]
      break;
 8003a60:	e108      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a62:	4b88      	ldr	r3, [pc, #544]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a6c:	4b85      	ldr	r3, [pc, #532]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a78:	4b82      	ldr	r3, [pc, #520]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a82:	4b80      	ldr	r3, [pc, #512]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a86:	08db      	lsrs	r3, r3, #3
 8003a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80e1 	beq.w	8003c68 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	f000 8083 	beq.w	8003bb4 <HAL_RCC_GetSysClockFreq+0x204>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	f200 80a1 	bhi.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x248>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x114>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d056      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ac2:	e099      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d02d      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	08db      	lsrs	r3, r3, #3
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	4a6b      	ldr	r2, [pc, #428]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	ee07 3a90 	vmov	s15, r3
 8003ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afa:	4b62      	ldr	r3, [pc, #392]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b0e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b2a:	e087      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b36:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003c98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3e:	4b51      	ldr	r3, [pc, #324]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b52:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b6e:	e065      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b82:	4b40      	ldr	r3, [pc, #256]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b96:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bb2:	e043      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003ca0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bda:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bf6:	e021      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c1e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c3c:	4b11      	ldr	r3, [pc, #68]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	0a5b      	lsrs	r3, r3, #9
 8003c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c46:	3301      	adds	r3, #1
 8003c48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c60:	ee17 3a90 	vmov	r3, s15
 8003c64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c66:	e005      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
      break;
 8003c6c:	e002      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c6e:	4b07      	ldr	r3, [pc, #28]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c70:	61bb      	str	r3, [r7, #24]
      break;
 8003c72:	bf00      	nop
  }

  return sysclockfreq;
 8003c74:	69bb      	ldr	r3, [r7, #24]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3724      	adds	r7, #36	@ 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	58024400 	.word	0x58024400
 8003c88:	03d09000 	.word	0x03d09000
 8003c8c:	003d0900 	.word	0x003d0900
 8003c90:	016e3600 	.word	0x016e3600
 8003c94:	46000000 	.word	0x46000000
 8003c98:	4c742400 	.word	0x4c742400
 8003c9c:	4a742400 	.word	0x4a742400
 8003ca0:	4bb71b00 	.word	0x4bb71b00

08003ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003caa:	f7ff fe81 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	490f      	ldr	r1, [pc, #60]	@ (8003cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cbc:	5ccb      	ldrb	r3, [r1, r3]
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	4a09      	ldr	r2, [pc, #36]	@ (8003cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cd2:	5cd3      	ldrb	r3, [r2, r3]
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	fa22 f303 	lsr.w	r3, r2, r3
 8003cde:	4a07      	ldr	r2, [pc, #28]	@ (8003cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8003ce0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ce2:	4a07      	ldr	r2, [pc, #28]	@ (8003d00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ce8:	4b04      	ldr	r3, [pc, #16]	@ (8003cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	080079e4 	.word	0x080079e4
 8003cfc:	24000004 	.word	0x24000004
 8003d00:	24000000 	.word	0x24000000

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d08:	f7ff ffcc 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	091b      	lsrs	r3, r3, #4
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4904      	ldr	r1, [pc, #16]	@ (8003d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	58024400 	.word	0x58024400
 8003d2c:	080079e4 	.word	0x080079e4

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d34:	f7ff ffb6 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4904      	ldr	r1, [pc, #16]	@ (8003d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	58024400 	.word	0x58024400
 8003d58:	080079e4 	.word	0x080079e4

08003d5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d60:	b0ca      	sub	sp, #296	@ 0x128
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003d80:	2500      	movs	r5, #0
 8003d82:	ea54 0305 	orrs.w	r3, r4, r5
 8003d86:	d049      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d92:	d02f      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d98:	d828      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d9e:	d01a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003da0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003da4:	d822      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003daa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dae:	d007      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003db0:	e01c      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db2:	4bb8      	ldr	r3, [pc, #736]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	4ab7      	ldr	r2, [pc, #732]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dbe:	e01a      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fc8f 	bl	80056ec <RCCEx_PLL2_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dd4:	e00f      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	3328      	adds	r3, #40	@ 0x28
 8003ddc:	2102      	movs	r1, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 fd36 	bl	8005850 <RCCEx_PLL3_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dea:	e004      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003df2:	e000      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003dfe:	4ba5      	ldr	r3, [pc, #660]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e0c:	4aa1      	ldr	r2, [pc, #644]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e12:	e003      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003e28:	f04f 0900 	mov.w	r9, #0
 8003e2c:	ea58 0309 	orrs.w	r3, r8, r9
 8003e30:	d047      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d82a      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e59 	.word	0x08003e59
 8003e48:	08003e67 	.word	0x08003e67
 8003e4c:	08003e7d 	.word	0x08003e7d
 8003e50:	08003e9b 	.word	0x08003e9b
 8003e54:	08003e9b 	.word	0x08003e9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e58:	4b8e      	ldr	r3, [pc, #568]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5c:	4a8d      	ldr	r2, [pc, #564]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e64:	e01a      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 fc3c 	bl	80056ec <RCCEx_PLL2_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e7a:	e00f      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e80:	3328      	adds	r3, #40	@ 0x28
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 fce3 	bl	8005850 <RCCEx_PLL3_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e90:	e004      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e98:	e000      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ea4:	4b7b      	ldr	r3, [pc, #492]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea8:	f023 0107 	bic.w	r1, r3, #7
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb2:	4a78      	ldr	r2, [pc, #480]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eb8:	e003      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003ece:	f04f 0b00 	mov.w	fp, #0
 8003ed2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ed6:	d04c      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee2:	d030      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee8:	d829      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003eea:	2bc0      	cmp	r3, #192	@ 0xc0
 8003eec:	d02d      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003eee:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ef0:	d825      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ef2:	2b80      	cmp	r3, #128	@ 0x80
 8003ef4:	d018      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ef6:	2b80      	cmp	r3, #128	@ 0x80
 8003ef8:	d821      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003efe:	2b40      	cmp	r3, #64	@ 0x40
 8003f00:	d007      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003f02:	e01c      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f04:	4b63      	ldr	r3, [pc, #396]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	4a62      	ldr	r2, [pc, #392]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f10:	e01c      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f16:	3308      	adds	r3, #8
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 fbe6 	bl	80056ec <RCCEx_PLL2_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f26:	e011      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2c:	3328      	adds	r3, #40	@ 0x28
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fc8d 	bl	8005850 <RCCEx_PLL3_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f3c:	e006      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f44:	e002      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f54:	4b4f      	ldr	r3, [pc, #316]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f62:	4a4c      	ldr	r2, [pc, #304]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f68:	e003      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003f7e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003f88:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d053      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f9e:	d035      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003fa0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fa4:	d82e      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fa6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003faa:	d031      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003fac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003fb0:	d828      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fb6:	d01a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003fb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fbc:	d822      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fc6:	d007      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003fc8:	e01c      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fca:	4b32      	ldr	r3, [pc, #200]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	4a31      	ldr	r2, [pc, #196]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fd6:	e01c      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fdc:	3308      	adds	r3, #8
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 fb83 	bl	80056ec <RCCEx_PLL2_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003fec:	e011      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	3328      	adds	r3, #40	@ 0x28
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 fc2a 	bl	8005850 <RCCEx_PLL3_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004002:	e006      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800400a:	e002      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800400c:	bf00      	nop
 800400e:	e000      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800401a:	4b1e      	ldr	r3, [pc, #120]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800402a:	4a1a      	ldr	r2, [pc, #104]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800402c:	430b      	orrs	r3, r1
 800402e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004030:	e003      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004046:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800404a:	2300      	movs	r3, #0
 800404c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004050:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004054:	460b      	mov	r3, r1
 8004056:	4313      	orrs	r3, r2
 8004058:	d056      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004062:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004066:	d038      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004068:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800406c:	d831      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800406e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004072:	d034      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004074:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004078:	d82b      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800407a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800407e:	d01d      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004080:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004084:	d825      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800408a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004090:	e01f      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004092:	bf00      	nop
 8004094:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004098:	4ba2      	ldr	r3, [pc, #648]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	4aa1      	ldr	r2, [pc, #644]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800409e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040a4:	e01c      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	3308      	adds	r3, #8
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fb1c 	bl	80056ec <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80040ba:	e011      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c0:	3328      	adds	r3, #40	@ 0x28
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 fbc3 	bl	8005850 <RCCEx_PLL3_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040d0:	e006      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d8:	e002      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040da:	bf00      	nop
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040e8:	4b8e      	ldr	r3, [pc, #568]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80040f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040f8:	4a8a      	ldr	r2, [pc, #552]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040fa:	430b      	orrs	r3, r1
 80040fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80040fe:	e003      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004114:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800411e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004122:	460b      	mov	r3, r1
 8004124:	4313      	orrs	r3, r2
 8004126:	d03a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412e:	2b30      	cmp	r3, #48	@ 0x30
 8004130:	d01f      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004132:	2b30      	cmp	r3, #48	@ 0x30
 8004134:	d819      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004136:	2b20      	cmp	r3, #32
 8004138:	d00c      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800413a:	2b20      	cmp	r3, #32
 800413c:	d815      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d019      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004142:	2b10      	cmp	r3, #16
 8004144:	d111      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004146:	4b77      	ldr	r3, [pc, #476]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	4a76      	ldr	r2, [pc, #472]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800414c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004150:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004152:	e011      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004158:	3308      	adds	r3, #8
 800415a:	2102      	movs	r1, #2
 800415c:	4618      	mov	r0, r3
 800415e:	f001 fac5 	bl	80056ec <RCCEx_PLL2_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004168:	e006      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004170:	e002      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004172:	bf00      	nop
 8004174:	e000      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004180:	4b68      	ldr	r3, [pc, #416]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004184:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418e:	4a65      	ldr	r2, [pc, #404]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004190:	430b      	orrs	r3, r1
 8004192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004194:	e003      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80041aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80041b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	d051      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041c8:	d035      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80041ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041ce:	d82e      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041d4:	d031      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80041d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041da:	d828      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e0:	d01a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80041e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e6:	d822      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80041ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f0:	d007      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80041f2:	e01c      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004200:	e01c      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004206:	3308      	adds	r3, #8
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f001 fa6e 	bl	80056ec <RCCEx_PLL2_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004216:	e011      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	3328      	adds	r3, #40	@ 0x28
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f001 fb15 	bl	8005850 <RCCEx_PLL3_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800422c:	e006      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004234:	e002      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800423a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004244:	4b37      	ldr	r3, [pc, #220]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004248:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004252:	4a34      	ldr	r2, [pc, #208]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004254:	430b      	orrs	r3, r1
 8004256:	6513      	str	r3, [r2, #80]	@ 0x50
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800425e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800426e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004272:	2300      	movs	r3, #0
 8004274:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004278:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d056      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800428c:	d033      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800428e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004292:	d82c      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004294:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004298:	d02f      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800429a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800429e:	d826      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042a4:	d02b      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80042a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042aa:	d820      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042b0:	d012      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80042b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042b6:	d81a      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d022      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c0:	d115      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c6:	3308      	adds	r3, #8
 80042c8:	2101      	movs	r1, #1
 80042ca:	4618      	mov	r0, r3
 80042cc:	f001 fa0e 	bl	80056ec <RCCEx_PLL2_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042d6:	e015      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	3328      	adds	r3, #40	@ 0x28
 80042de:	2101      	movs	r1, #1
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 fab5 	bl	8005850 <RCCEx_PLL3_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042ec:	e00a      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042f4:	e006      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042f6:	bf00      	nop
 80042f8:	e004      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042fa:	bf00      	nop
 80042fc:	e002      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10d      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800430c:	4b05      	ldr	r3, [pc, #20]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800430e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004310:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800431a:	4a02      	ldr	r2, [pc, #8]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800431c:	430b      	orrs	r3, r1
 800431e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004320:	e006      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004322:	bf00      	nop
 8004324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800433c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004340:	2300      	movs	r3, #0
 8004342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004346:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800434a:	460b      	mov	r3, r1
 800434c:	4313      	orrs	r3, r2
 800434e:	d055      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004354:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800435c:	d033      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800435e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004362:	d82c      	bhi.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004368:	d02f      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436e:	d826      	bhi.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004370:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004374:	d02b      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004376:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800437a:	d820      	bhi.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800437c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004380:	d012      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004386:	d81a      	bhi.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d022      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800438c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004390:	d115      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004396:	3308      	adds	r3, #8
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f001 f9a6 	bl	80056ec <RCCEx_PLL2_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043a6:	e015      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	3328      	adds	r3, #40	@ 0x28
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 fa4d 	bl	8005850 <RCCEx_PLL3_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043bc:	e00a      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043c4:	e006      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043c6:	bf00      	nop
 80043c8:	e004      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043ca:	bf00      	nop
 80043cc:	e002      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043dc:	4ba3      	ldr	r3, [pc, #652]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043ec:	4a9f      	ldr	r2, [pc, #636]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ee:	430b      	orrs	r3, r1
 80043f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80043f2:	e003      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800440c:	2300      	movs	r3, #0
 800440e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004412:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
 800441a:	d037      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004426:	d00e      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800442c:	d816      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d018      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004432:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004436:	d111      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004438:	4b8c      	ldr	r3, [pc, #560]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	4a8b      	ldr	r2, [pc, #556]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800443e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004444:	e00f      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	3308      	adds	r3, #8
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f001 f94c 	bl	80056ec <RCCEx_PLL2_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800445a:	e004      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004462:	e000      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800446e:	4b7f      	ldr	r3, [pc, #508]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004472:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447c:	4a7b      	ldr	r2, [pc, #492]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800447e:	430b      	orrs	r3, r1
 8004480:	6513      	str	r3, [r2, #80]	@ 0x50
 8004482:	e003      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800449c:	2300      	movs	r3, #0
 800449e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80044a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4313      	orrs	r3, r2
 80044aa:	d039      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d81c      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80044b6:	a201      	add	r2, pc, #4	@ (adr r2, 80044bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80044b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044bc:	080044f9 	.word	0x080044f9
 80044c0:	080044cd 	.word	0x080044cd
 80044c4:	080044db 	.word	0x080044db
 80044c8:	080044f9 	.word	0x080044f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044cc:	4b67      	ldr	r3, [pc, #412]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	4a66      	ldr	r2, [pc, #408]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044d8:	e00f      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044de:	3308      	adds	r3, #8
 80044e0:	2102      	movs	r1, #2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 f902 	bl	80056ec <RCCEx_PLL2_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044ee:	e004      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044f6:	e000      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80044f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004502:	4b5a      	ldr	r3, [pc, #360]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004506:	f023 0103 	bic.w	r1, r3, #3
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004510:	4a56      	ldr	r2, [pc, #344]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004512:	430b      	orrs	r3, r1
 8004514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004516:	e003      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800452c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004530:	2300      	movs	r3, #0
 8004532:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004536:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800453a:	460b      	mov	r3, r1
 800453c:	4313      	orrs	r3, r2
 800453e:	f000 809f 	beq.w	8004680 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004542:	4b4b      	ldr	r3, [pc, #300]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a4a      	ldr	r2, [pc, #296]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800454c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800454e:	f7fd fa8f 	bl	8001a70 <HAL_GetTick>
 8004552:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004556:	e00b      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004558:	f7fd fa8a 	bl	8001a70 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b64      	cmp	r3, #100	@ 0x64
 8004566:	d903      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800456e:	e005      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004570:	4b3f      	ldr	r3, [pc, #252]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ed      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800457c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004580:	2b00      	cmp	r3, #0
 8004582:	d179      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004584:	4b39      	ldr	r3, [pc, #228]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004586:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004590:	4053      	eors	r3, r2
 8004592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004596:	2b00      	cmp	r3, #0
 8004598:	d015      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800459a:	4b34      	ldr	r3, [pc, #208]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045a6:	4b31      	ldr	r3, [pc, #196]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	4a30      	ldr	r2, [pc, #192]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045b2:	4b2e      	ldr	r3, [pc, #184]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	4a2d      	ldr	r2, [pc, #180]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045be:	4a2b      	ldr	r2, [pc, #172]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045d2:	d118      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd fa4c 	bl	8001a70 <HAL_GetTick>
 80045d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045dc:	e00d      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045de:	f7fd fa47 	bl	8001a70 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80045e8:	1ad2      	subs	r2, r2, r3
 80045ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d903      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80045f8:	e005      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045fa:	4b1c      	ldr	r3, [pc, #112]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0eb      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460a:	2b00      	cmp	r3, #0
 800460c:	d129      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800461e:	d10e      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004620:	4b12      	ldr	r3, [pc, #72]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004630:	091a      	lsrs	r2, r3, #4
 8004632:	4b10      	ldr	r3, [pc, #64]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004634:	4013      	ands	r3, r2
 8004636:	4a0d      	ldr	r2, [pc, #52]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004638:	430b      	orrs	r3, r1
 800463a:	6113      	str	r3, [r2, #16]
 800463c:	e005      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800463e:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	4a0a      	ldr	r2, [pc, #40]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004644:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004648:	6113      	str	r3, [r2, #16]
 800464a:	4b08      	ldr	r3, [pc, #32]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800464c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465a:	4a04      	ldr	r2, [pc, #16]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800465c:	430b      	orrs	r3, r1
 800465e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004660:	e00e      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800466a:	e009      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800466c:	58024400 	.word	0x58024400
 8004670:	58024800 	.word	0x58024800
 8004674:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004688:	f002 0301 	and.w	r3, r2, #1
 800468c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004690:	2300      	movs	r3, #0
 8004692:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004696:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800469a:	460b      	mov	r3, r1
 800469c:	4313      	orrs	r3, r2
 800469e:	f000 8089 	beq.w	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80046a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a8:	2b28      	cmp	r3, #40	@ 0x28
 80046aa:	d86b      	bhi.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	0800478d 	.word	0x0800478d
 80046b8:	08004785 	.word	0x08004785
 80046bc:	08004785 	.word	0x08004785
 80046c0:	08004785 	.word	0x08004785
 80046c4:	08004785 	.word	0x08004785
 80046c8:	08004785 	.word	0x08004785
 80046cc:	08004785 	.word	0x08004785
 80046d0:	08004785 	.word	0x08004785
 80046d4:	08004759 	.word	0x08004759
 80046d8:	08004785 	.word	0x08004785
 80046dc:	08004785 	.word	0x08004785
 80046e0:	08004785 	.word	0x08004785
 80046e4:	08004785 	.word	0x08004785
 80046e8:	08004785 	.word	0x08004785
 80046ec:	08004785 	.word	0x08004785
 80046f0:	08004785 	.word	0x08004785
 80046f4:	0800476f 	.word	0x0800476f
 80046f8:	08004785 	.word	0x08004785
 80046fc:	08004785 	.word	0x08004785
 8004700:	08004785 	.word	0x08004785
 8004704:	08004785 	.word	0x08004785
 8004708:	08004785 	.word	0x08004785
 800470c:	08004785 	.word	0x08004785
 8004710:	08004785 	.word	0x08004785
 8004714:	0800478d 	.word	0x0800478d
 8004718:	08004785 	.word	0x08004785
 800471c:	08004785 	.word	0x08004785
 8004720:	08004785 	.word	0x08004785
 8004724:	08004785 	.word	0x08004785
 8004728:	08004785 	.word	0x08004785
 800472c:	08004785 	.word	0x08004785
 8004730:	08004785 	.word	0x08004785
 8004734:	0800478d 	.word	0x0800478d
 8004738:	08004785 	.word	0x08004785
 800473c:	08004785 	.word	0x08004785
 8004740:	08004785 	.word	0x08004785
 8004744:	08004785 	.word	0x08004785
 8004748:	08004785 	.word	0x08004785
 800474c:	08004785 	.word	0x08004785
 8004750:	08004785 	.word	0x08004785
 8004754:	0800478d 	.word	0x0800478d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475c:	3308      	adds	r3, #8
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f000 ffc3 	bl	80056ec <RCCEx_PLL2_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800476c:	e00f      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004772:	3328      	adds	r3, #40	@ 0x28
 8004774:	2101      	movs	r1, #1
 8004776:	4618      	mov	r0, r3
 8004778:	f001 f86a 	bl	8005850 <RCCEx_PLL3_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004782:	e004      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800478a:	e000      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800478c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004796:	4bbf      	ldr	r3, [pc, #764]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047a4:	4abb      	ldr	r2, [pc, #748]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047a6:	430b      	orrs	r3, r1
 80047a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80047aa:	e003      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f002 0302 	and.w	r3, r2, #2
 80047c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047c4:	2300      	movs	r3, #0
 80047c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80047ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80047ce:	460b      	mov	r3, r1
 80047d0:	4313      	orrs	r3, r2
 80047d2:	d041      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047da:	2b05      	cmp	r3, #5
 80047dc:	d824      	bhi.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80047de:	a201      	add	r2, pc, #4	@ (adr r2, 80047e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80047e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e4:	08004831 	.word	0x08004831
 80047e8:	080047fd 	.word	0x080047fd
 80047ec:	08004813 	.word	0x08004813
 80047f0:	08004831 	.word	0x08004831
 80047f4:	08004831 	.word	0x08004831
 80047f8:	08004831 	.word	0x08004831
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	3308      	adds	r3, #8
 8004802:	2101      	movs	r1, #1
 8004804:	4618      	mov	r0, r3
 8004806:	f000 ff71 	bl	80056ec <RCCEx_PLL2_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004810:	e00f      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004816:	3328      	adds	r3, #40	@ 0x28
 8004818:	2101      	movs	r1, #1
 800481a:	4618      	mov	r0, r3
 800481c:	f001 f818 	bl	8005850 <RCCEx_PLL3_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004826:	e004      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800482e:	e000      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10a      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800483a:	4b96      	ldr	r3, [pc, #600]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800483c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483e:	f023 0107 	bic.w	r1, r3, #7
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004846:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004848:	4a92      	ldr	r2, [pc, #584]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800484a:	430b      	orrs	r3, r1
 800484c:	6553      	str	r3, [r2, #84]	@ 0x54
 800484e:	e003      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f002 0304 	and.w	r3, r2, #4
 8004864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004868:	2300      	movs	r3, #0
 800486a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800486e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004872:	460b      	mov	r3, r1
 8004874:	4313      	orrs	r3, r2
 8004876:	d044      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004880:	2b05      	cmp	r3, #5
 8004882:	d825      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004884:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	080048d9 	.word	0x080048d9
 8004890:	080048a5 	.word	0x080048a5
 8004894:	080048bb 	.word	0x080048bb
 8004898:	080048d9 	.word	0x080048d9
 800489c:	080048d9 	.word	0x080048d9
 80048a0:	080048d9 	.word	0x080048d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a8:	3308      	adds	r3, #8
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 ff1d 	bl	80056ec <RCCEx_PLL2_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048b8:	e00f      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048be:	3328      	adds	r3, #40	@ 0x28
 80048c0:	2101      	movs	r1, #1
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 ffc4 	bl	8005850 <RCCEx_PLL3_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048ce:	e004      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048d6:	e000      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80048d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e6:	f023 0107 	bic.w	r1, r3, #7
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f2:	4a68      	ldr	r2, [pc, #416]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048f8:	e003      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	f002 0320 	and.w	r3, r2, #32
 800490e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004912:	2300      	movs	r3, #0
 8004914:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800491c:	460b      	mov	r3, r1
 800491e:	4313      	orrs	r3, r2
 8004920:	d055      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800492e:	d033      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004934:	d82c      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493a:	d02f      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004940:	d826      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004942:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004946:	d02b      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004948:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800494c:	d820      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800494e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004952:	d012      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004958:	d81a      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d022      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800495e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004962:	d115      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004968:	3308      	adds	r3, #8
 800496a:	2100      	movs	r1, #0
 800496c:	4618      	mov	r0, r3
 800496e:	f000 febd 	bl	80056ec <RCCEx_PLL2_Config>
 8004972:	4603      	mov	r3, r0
 8004974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004978:	e015      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	3328      	adds	r3, #40	@ 0x28
 8004980:	2102      	movs	r1, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f000 ff64 	bl	8005850 <RCCEx_PLL3_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800498e:	e00a      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004996:	e006      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004998:	bf00      	nop
 800499a:	e004      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800499c:	bf00      	nop
 800499e:	e002      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049a0:	bf00      	nop
 80049a2:	e000      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80049a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10b      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ae:	4b39      	ldr	r3, [pc, #228]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049be:	4a35      	ldr	r2, [pc, #212]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80049c4:	e003      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80049da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049de:	2300      	movs	r3, #0
 80049e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80049e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4313      	orrs	r3, r2
 80049ec:	d058      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80049fa:	d033      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80049fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004a00:	d82c      	bhi.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a06:	d02f      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a0c:	d826      	bhi.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a12:	d02b      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004a14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a18:	d820      	bhi.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a1e:	d012      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a24:	d81a      	bhi.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d022      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2e:	d115      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a34:	3308      	adds	r3, #8
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fe57 	bl	80056ec <RCCEx_PLL2_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a44:	e015      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4a:	3328      	adds	r3, #40	@ 0x28
 8004a4c:	2102      	movs	r1, #2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fefe 	bl	8005850 <RCCEx_PLL3_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a62:	e006      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a64:	bf00      	nop
 8004a66:	e004      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a68:	bf00      	nop
 8004a6a:	e002      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a6c:	bf00      	nop
 8004a6e:	e000      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10e      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a7a:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a8a:	4a02      	ldr	r2, [pc, #8]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a90:	e006      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a92:	bf00      	nop
 8004a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ab6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004aba:	460b      	mov	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d055      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ac8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004acc:	d033      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004ace:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ad2:	d82c      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad8:	d02f      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ade:	d826      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ae0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ae4:	d02b      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004ae6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004aea:	d820      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004aec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004af0:	d012      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004af2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004af6:	d81a      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d022      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004afc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b00:	d115      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b06:	3308      	adds	r3, #8
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fdee 	bl	80056ec <RCCEx_PLL2_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b16:	e015      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1c:	3328      	adds	r3, #40	@ 0x28
 8004b1e:	2102      	movs	r1, #2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fe95 	bl	8005850 <RCCEx_PLL3_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b34:	e006      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b36:	bf00      	nop
 8004b38:	e004      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b4c:	4ba1      	ldr	r3, [pc, #644]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b50:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b5c:	4a9d      	ldr	r2, [pc, #628]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b62:	e003      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f002 0308 	and.w	r3, r2, #8
 8004b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004b86:	460b      	mov	r3, r1
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	d01e      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9e:	3328      	adds	r3, #40	@ 0x28
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fe54 	bl	8005850 <RCCEx_PLL3_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004bb4:	4b87      	ldr	r3, [pc, #540]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc4:	4a83      	ldr	r2, [pc, #524]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	f002 0310 	and.w	r3, r2, #16
 8004bd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004be0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004be4:	460b      	mov	r3, r1
 8004be6:	4313      	orrs	r3, r2
 8004be8:	d01e      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf6:	d10c      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfc:	3328      	adds	r3, #40	@ 0x28
 8004bfe:	2102      	movs	r1, #2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fe25 	bl	8005850 <RCCEx_PLL3_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c12:	4b70      	ldr	r3, [pc, #448]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c22:	4a6c      	ldr	r2, [pc, #432]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c24:	430b      	orrs	r3, r1
 8004c26:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004c34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c3e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004c42:	460b      	mov	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	d03e      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c54:	d022      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004c56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c5a:	d81b      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c64:	d00b      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004c66:	e015      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fd3b 	bl	80056ec <RCCEx_PLL2_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c7c:	e00f      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c82:	3328      	adds	r3, #40	@ 0x28
 8004c84:	2102      	movs	r1, #2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fde2 	bl	8005850 <RCCEx_PLL3_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c92:	e004      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c9a:	e000      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004caa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cb6:	4a47      	ldr	r2, [pc, #284]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cbc:	e003      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004cd2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cd8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	d03b      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cee:	d01f      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004cf0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cf4:	d818      	bhi.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cfa:	d003      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004cfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d00:	d007      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004d02:	e011      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d04:	4b33      	ldr	r3, [pc, #204]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	4a32      	ldr	r2, [pc, #200]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d10:	e00f      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d16:	3328      	adds	r3, #40	@ 0x28
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fd98 	bl	8005850 <RCCEx_PLL3_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d26:	e004      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d3a:	4b26      	ldr	r3, [pc, #152]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4a:	4a22      	ldr	r2, [pc, #136]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d50:	e003      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d66:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d68:	2300      	movs	r3, #0
 8004d6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004d70:	460b      	mov	r3, r1
 8004d72:	4313      	orrs	r3, r2
 8004d74:	d034      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d84:	d007      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004d86:	e011      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d88:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	4a11      	ldr	r2, [pc, #68]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d94:	e00e      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fca4 	bl	80056ec <RCCEx_PLL2_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004daa:	e003      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10d      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004dbc:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dca:	4a02      	ldr	r2, [pc, #8]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dd0:	e006      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004dd2:	bf00      	nop
 8004dd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dee:	2300      	movs	r3, #0
 8004df0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004df2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004df6:	460b      	mov	r3, r1
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	d00c      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e00:	3328      	adds	r3, #40	@ 0x28
 8004e02:	2102      	movs	r1, #2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fd23 	bl	8005850 <RCCEx_PLL3_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004e22:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e24:	2300      	movs	r3, #0
 8004e26:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e28:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	d038      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e3e:	d018      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004e40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e44:	d811      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e4a:	d014      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e50:	d80b      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d011      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e5c:	4bc3      	ldr	r3, [pc, #780]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	4ac2      	ldr	r2, [pc, #776]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e68:	e008      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e70:	e004      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10b      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e84:	4bb9      	ldr	r3, [pc, #740]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e88:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e94:	4ab5      	ldr	r2, [pc, #724]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e96:	430b      	orrs	r3, r1
 8004e98:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e9a:	e003      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004eb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	d009      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ec0:	4baa      	ldr	r3, [pc, #680]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ece:	4aa7      	ldr	r2, [pc, #668]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004ee0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	d00a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ef0:	4b9e      	ldr	r3, [pc, #632]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004f00:	4a9a      	ldr	r2, [pc, #616]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f02:	430b      	orrs	r3, r1
 8004f04:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f14:	2300      	movs	r3, #0
 8004f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f22:	4b92      	ldr	r3, [pc, #584]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f26:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f30:	4a8e      	ldr	r2, [pc, #568]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f32:	430b      	orrs	r3, r1
 8004f34:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004f42:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f44:	2300      	movs	r3, #0
 8004f46:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f48:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	d00e      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f52:	4b86      	ldr	r3, [pc, #536]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	4a85      	ldr	r2, [pc, #532]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f5c:	6113      	str	r3, [r2, #16]
 8004f5e:	4b83      	ldr	r3, [pc, #524]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f60:	6919      	ldr	r1, [r3, #16]
 8004f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f6a:	4a80      	ldr	r2, [pc, #512]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f7e:	2300      	movs	r3, #0
 8004f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f86:	460b      	mov	r3, r1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f8c:	4b77      	ldr	r3, [pc, #476]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f90:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9a:	4a74      	ldr	r2, [pc, #464]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fae:	2300      	movs	r3, #0
 8004fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fb2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fbc:	4b6b      	ldr	r3, [pc, #428]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fcc:	4a67      	ldr	r2, [pc, #412]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	2100      	movs	r1, #0
 8004fdc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fe4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4313      	orrs	r3, r2
 8004fec:	d011      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff2:	3308      	adds	r3, #8
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fb78 	bl	80056ec <RCCEx_PLL2_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800500e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	2100      	movs	r1, #0
 800501c:	6239      	str	r1, [r7, #32]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	627b      	str	r3, [r7, #36]	@ 0x24
 8005024:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005028:	460b      	mov	r3, r1
 800502a:	4313      	orrs	r3, r2
 800502c:	d011      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800502e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005032:	3308      	adds	r3, #8
 8005034:	2101      	movs	r1, #1
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fb58 	bl	80056ec <RCCEx_PLL2_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800504e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	2100      	movs	r1, #0
 800505c:	61b9      	str	r1, [r7, #24]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005068:	460b      	mov	r3, r1
 800506a:	4313      	orrs	r3, r2
 800506c:	d011      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800506e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005072:	3308      	adds	r3, #8
 8005074:	2102      	movs	r1, #2
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fb38 	bl	80056ec <RCCEx_PLL2_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800508e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	2100      	movs	r1, #0
 800509c:	6139      	str	r1, [r7, #16]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80050a8:	460b      	mov	r3, r1
 80050aa:	4313      	orrs	r3, r2
 80050ac:	d011      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b2:	3328      	adds	r3, #40	@ 0x28
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fbca 	bl	8005850 <RCCEx_PLL3_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80050c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80050d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	2100      	movs	r1, #0
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050e8:	460b      	mov	r3, r1
 80050ea:	4313      	orrs	r3, r2
 80050ec:	d011      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f2:	3328      	adds	r3, #40	@ 0x28
 80050f4:	2101      	movs	r1, #1
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fbaa 	bl	8005850 <RCCEx_PLL3_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800510e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	2100      	movs	r1, #0
 800511c:	6039      	str	r1, [r7, #0]
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	607b      	str	r3, [r7, #4]
 8005124:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005128:	460b      	mov	r3, r1
 800512a:	4313      	orrs	r3, r2
 800512c:	d011      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800512e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005132:	3328      	adds	r3, #40	@ 0x28
 8005134:	2102      	movs	r1, #2
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fb8a 	bl	8005850 <RCCEx_PLL3_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800514e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005152:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	e000      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
}
 8005160:	4618      	mov	r0, r3
 8005162:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005166:	46bd      	mov	sp, r7
 8005168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516c:	58024400 	.word	0x58024400

08005170 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005174:	f7fe fd96 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8005178:	4602      	mov	r2, r0
 800517a:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	091b      	lsrs	r3, r3, #4
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	4904      	ldr	r1, [pc, #16]	@ (8005198 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005186:	5ccb      	ldrb	r3, [r1, r3]
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005190:	4618      	mov	r0, r3
 8005192:	bd80      	pop	{r7, pc}
 8005194:	58024400 	.word	0x58024400
 8005198:	080079e4 	.word	0x080079e4

0800519c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800519c:	b480      	push	{r7}
 800519e:	b089      	sub	sp, #36	@ 0x24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051a4:	4ba1      	ldr	r3, [pc, #644]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80051ae:	4b9f      	ldr	r3, [pc, #636]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b2:	0b1b      	lsrs	r3, r3, #12
 80051b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051ba:	4b9c      	ldr	r3, [pc, #624]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80051c6:	4b99      	ldr	r3, [pc, #612]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ca:	08db      	lsrs	r3, r3, #3
 80051cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8111 	beq.w	800540c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	f000 8083 	beq.w	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	f200 80a1 	bhi.w	800533c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d056      	beq.n	80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005206:	e099      	b.n	800533c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005208:	4b88      	ldr	r3, [pc, #544]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d02d      	beq.n	8005270 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005214:	4b85      	ldr	r3, [pc, #532]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	08db      	lsrs	r3, r3, #3
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	4a84      	ldr	r2, [pc, #528]	@ (8005430 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
 8005224:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	ee07 3a90 	vmov	s15, r3
 800522c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523e:	4b7b      	ldr	r3, [pc, #492]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005252:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800526e:	e087      	b.n	8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005438 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800527e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005282:	4b6a      	ldr	r3, [pc, #424]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005292:	ed97 6a03 	vldr	s12, [r7, #12]
 8005296:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800529a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052b2:	e065      	b.n	8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800543c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c6:	4b59      	ldr	r3, [pc, #356]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052f6:	e043      	b.n	8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530a:	4b48      	ldr	r3, [pc, #288]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800530c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531a:	ed97 6a03 	vldr	s12, [r7, #12]
 800531e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800533a:	e021      	b.n	8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800543c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b37      	ldr	r3, [pc, #220]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005362:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800537e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005380:	4b2a      	ldr	r3, [pc, #168]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	0a5b      	lsrs	r3, r3, #9
 8005386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800539a:	edd7 6a07 	vldr	s13, [r7, #28]
 800539e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a6:	ee17 2a90 	vmov	r2, s15
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80053ae:	4b1f      	ldr	r3, [pc, #124]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053b8:	ee07 3a90 	vmov	s15, r3
 80053bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80053cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053d4:	ee17 2a90 	vmov	r2, s15
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80053dc:	4b13      	ldr	r3, [pc, #76]	@ (800542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	0e1b      	lsrs	r3, r3, #24
 80053e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005402:	ee17 2a90 	vmov	r2, s15
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800540a:	e008      	b.n	800541e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	609a      	str	r2, [r3, #8]
}
 800541e:	bf00      	nop
 8005420:	3724      	adds	r7, #36	@ 0x24
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	58024400 	.word	0x58024400
 8005430:	03d09000 	.word	0x03d09000
 8005434:	46000000 	.word	0x46000000
 8005438:	4c742400 	.word	0x4c742400
 800543c:	4a742400 	.word	0x4a742400
 8005440:	4bb71b00 	.word	0x4bb71b00

08005444 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005444:	b480      	push	{r7}
 8005446:	b089      	sub	sp, #36	@ 0x24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800544c:	4ba1      	ldr	r3, [pc, #644]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005456:	4b9f      	ldr	r3, [pc, #636]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545a:	0d1b      	lsrs	r3, r3, #20
 800545c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005460:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005462:	4b9c      	ldr	r3, [pc, #624]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800546e:	4b99      	ldr	r3, [pc, #612]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	08db      	lsrs	r3, r3, #3
 8005474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005486:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8111 	beq.w	80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b02      	cmp	r3, #2
 8005496:	f000 8083 	beq.w	80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b02      	cmp	r3, #2
 800549e:	f200 80a1 	bhi.w	80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d056      	beq.n	800555c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80054ae:	e099      	b.n	80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054b0:	4b88      	ldr	r3, [pc, #544]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d02d      	beq.n	8005518 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054bc:	4b85      	ldr	r3, [pc, #532]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	08db      	lsrs	r3, r3, #3
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	4a84      	ldr	r2, [pc, #528]	@ (80056d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80054c8:	fa22 f303 	lsr.w	r3, r2, r3
 80054cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e6:	4b7b      	ldr	r3, [pc, #492]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800550a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005512:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005516:	e087      	b.n	8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005522:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80056e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552a:	4b6a      	ldr	r3, [pc, #424]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553a:	ed97 6a03 	vldr	s12, [r7, #12]
 800553e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800554e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800555a:	e065      	b.n	8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005566:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800556a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556e:	4b59      	ldr	r3, [pc, #356]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005582:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800559e:	e043      	b.n	8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80056e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80055ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b2:	4b48      	ldr	r3, [pc, #288]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055e2:	e021      	b.n	8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80056e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f6:	4b37      	ldr	r3, [pc, #220]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005606:	ed97 6a03 	vldr	s12, [r7, #12]
 800560a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800560e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800561a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005626:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005628:	4b2a      	ldr	r3, [pc, #168]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800562a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562c:	0a5b      	lsrs	r3, r3, #9
 800562e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800563a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800563e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005642:	edd7 6a07 	vldr	s13, [r7, #28]
 8005646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800564a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800564e:	ee17 2a90 	vmov	r2, s15
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005656:	4b1f      	ldr	r3, [pc, #124]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	0c1b      	lsrs	r3, r3, #16
 800565c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005668:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800566c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005670:	edd7 6a07 	vldr	s13, [r7, #28]
 8005674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800567c:	ee17 2a90 	vmov	r2, s15
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005684:	4b13      	ldr	r3, [pc, #76]	@ (80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005688:	0e1b      	lsrs	r3, r3, #24
 800568a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800569a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800569e:	edd7 6a07 	vldr	s13, [r7, #28]
 80056a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056aa:	ee17 2a90 	vmov	r2, s15
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80056b2:	e008      	b.n	80056c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	609a      	str	r2, [r3, #8]
}
 80056c6:	bf00      	nop
 80056c8:	3724      	adds	r7, #36	@ 0x24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	58024400 	.word	0x58024400
 80056d8:	03d09000 	.word	0x03d09000
 80056dc:	46000000 	.word	0x46000000
 80056e0:	4c742400 	.word	0x4c742400
 80056e4:	4a742400 	.word	0x4a742400
 80056e8:	4bb71b00 	.word	0x4bb71b00

080056ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056fa:	4b53      	ldr	r3, [pc, #332]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80056fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b03      	cmp	r3, #3
 8005704:	d101      	bne.n	800570a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e099      	b.n	800583e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800570a:	4b4f      	ldr	r3, [pc, #316]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a4e      	ldr	r2, [pc, #312]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 8005710:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005716:	f7fc f9ab 	bl	8001a70 <HAL_GetTick>
 800571a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800571c:	e008      	b.n	8005730 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800571e:	f7fc f9a7 	bl	8001a70 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e086      	b.n	800583e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005730:	4b45      	ldr	r3, [pc, #276]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f0      	bne.n	800571e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800573c:	4b42      	ldr	r3, [pc, #264]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	031b      	lsls	r3, r3, #12
 800574a:	493f      	ldr	r1, [pc, #252]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 800574c:	4313      	orrs	r3, r2
 800574e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	3b01      	subs	r3, #1
 8005756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	3b01      	subs	r3, #1
 8005760:	025b      	lsls	r3, r3, #9
 8005762:	b29b      	uxth	r3, r3
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	3b01      	subs	r3, #1
 800576c:	041b      	lsls	r3, r3, #16
 800576e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	3b01      	subs	r3, #1
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005780:	4931      	ldr	r1, [pc, #196]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 8005782:	4313      	orrs	r3, r2
 8005784:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005786:	4b30      	ldr	r3, [pc, #192]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	492d      	ldr	r1, [pc, #180]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005798:	4b2b      	ldr	r3, [pc, #172]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	f023 0220 	bic.w	r2, r3, #32
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	4928      	ldr	r1, [pc, #160]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80057aa:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	4a26      	ldr	r2, [pc, #152]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80057b0:	f023 0310 	bic.w	r3, r3, #16
 80057b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057b6:	4b24      	ldr	r3, [pc, #144]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80057b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057ba:	4b24      	ldr	r3, [pc, #144]	@ (800584c <RCCEx_PLL2_Config+0x160>)
 80057bc:	4013      	ands	r3, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	69d2      	ldr	r2, [r2, #28]
 80057c2:	00d2      	lsls	r2, r2, #3
 80057c4:	4920      	ldr	r1, [pc, #128]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80057d0:	f043 0310 	orr.w	r3, r3, #16
 80057d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d106      	bne.n	80057ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	4a19      	ldr	r2, [pc, #100]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80057e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057e8:	e00f      	b.n	800580a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d106      	bne.n	80057fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057f0:	4b15      	ldr	r3, [pc, #84]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	4a14      	ldr	r2, [pc, #80]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 80057f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057fc:	e005      	b.n	800580a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057fe:	4b12      	ldr	r3, [pc, #72]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 8005800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005802:	4a11      	ldr	r2, [pc, #68]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 8005804:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005808:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800580a:	4b0f      	ldr	r3, [pc, #60]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a0e      	ldr	r2, [pc, #56]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 8005810:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005816:	f7fc f92b 	bl	8001a70 <HAL_GetTick>
 800581a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800581c:	e008      	b.n	8005830 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800581e:	f7fc f927 	bl	8001a70 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e006      	b.n	800583e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005830:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <RCCEx_PLL2_Config+0x15c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0f0      	beq.n	800581e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	58024400 	.word	0x58024400
 800584c:	ffff0007 	.word	0xffff0007

08005850 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800585e:	4b53      	ldr	r3, [pc, #332]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	2b03      	cmp	r3, #3
 8005868:	d101      	bne.n	800586e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e099      	b.n	80059a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800586e:	4b4f      	ldr	r3, [pc, #316]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a4e      	ldr	r2, [pc, #312]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800587a:	f7fc f8f9 	bl	8001a70 <HAL_GetTick>
 800587e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005880:	e008      	b.n	8005894 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005882:	f7fc f8f5 	bl	8001a70 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e086      	b.n	80059a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005894:	4b45      	ldr	r3, [pc, #276]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f0      	bne.n	8005882 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80058a0:	4b42      	ldr	r3, [pc, #264]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	051b      	lsls	r3, r3, #20
 80058ae:	493f      	ldr	r1, [pc, #252]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	025b      	lsls	r3, r3, #9
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	3b01      	subs	r3, #1
 80058de:	061b      	lsls	r3, r3, #24
 80058e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058e4:	4931      	ldr	r1, [pc, #196]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058ea:	4b30      	ldr	r3, [pc, #192]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	492d      	ldr	r1, [pc, #180]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058fc:	4b2b      	ldr	r3, [pc, #172]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	4928      	ldr	r1, [pc, #160]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 800590a:	4313      	orrs	r3, r2
 800590c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800590e:	4b27      	ldr	r3, [pc, #156]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005912:	4a26      	ldr	r2, [pc, #152]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005918:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800591a:	4b24      	ldr	r3, [pc, #144]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 800591c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800591e:	4b24      	ldr	r3, [pc, #144]	@ (80059b0 <RCCEx_PLL3_Config+0x160>)
 8005920:	4013      	ands	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	69d2      	ldr	r2, [r2, #28]
 8005926:	00d2      	lsls	r2, r2, #3
 8005928:	4920      	ldr	r1, [pc, #128]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 800592a:	4313      	orrs	r3, r2
 800592c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800592e:	4b1f      	ldr	r3, [pc, #124]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	4a1e      	ldr	r2, [pc, #120]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005938:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d106      	bne.n	800594e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005940:	4b1a      	ldr	r3, [pc, #104]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005944:	4a19      	ldr	r2, [pc, #100]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005946:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800594a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800594c:	e00f      	b.n	800596e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d106      	bne.n	8005962 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005954:	4b15      	ldr	r3, [pc, #84]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	4a14      	ldr	r2, [pc, #80]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 800595a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800595e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005960:	e005      	b.n	800596e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005962:	4b12      	ldr	r3, [pc, #72]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	4a11      	ldr	r2, [pc, #68]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005968:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800596c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800596e:	4b0f      	ldr	r3, [pc, #60]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a0e      	ldr	r2, [pc, #56]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800597a:	f7fc f879 	bl	8001a70 <HAL_GetTick>
 800597e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005980:	e008      	b.n	8005994 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005982:	f7fc f875 	bl	8001a70 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e006      	b.n	80059a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005994:	4b05      	ldr	r3, [pc, #20]	@ (80059ac <RCCEx_PLL3_Config+0x15c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0f0      	beq.n	8005982 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	58024400 	.word	0x58024400
 80059b0:	ffff0007 	.word	0xffff0007

080059b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e10f      	b.n	8005be6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a87      	ldr	r2, [pc, #540]	@ (8005bf0 <HAL_SPI_Init+0x23c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00f      	beq.n	80059f6 <HAL_SPI_Init+0x42>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a86      	ldr	r2, [pc, #536]	@ (8005bf4 <HAL_SPI_Init+0x240>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00a      	beq.n	80059f6 <HAL_SPI_Init+0x42>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a84      	ldr	r2, [pc, #528]	@ (8005bf8 <HAL_SPI_Init+0x244>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d005      	beq.n	80059f6 <HAL_SPI_Init+0x42>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	2b0f      	cmp	r3, #15
 80059f0:	d901      	bls.n	80059f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e0f7      	b.n	8005be6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fbbc 	bl	8006174 <SPI_GetPacketSize>
 80059fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a7b      	ldr	r2, [pc, #492]	@ (8005bf0 <HAL_SPI_Init+0x23c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00c      	beq.n	8005a22 <HAL_SPI_Init+0x6e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a79      	ldr	r2, [pc, #484]	@ (8005bf4 <HAL_SPI_Init+0x240>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <HAL_SPI_Init+0x6e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a78      	ldr	r2, [pc, #480]	@ (8005bf8 <HAL_SPI_Init+0x244>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d002      	beq.n	8005a22 <HAL_SPI_Init+0x6e>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d811      	bhi.n	8005a46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a26:	4a72      	ldr	r2, [pc, #456]	@ (8005bf0 <HAL_SPI_Init+0x23c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d009      	beq.n	8005a40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a70      	ldr	r2, [pc, #448]	@ (8005bf4 <HAL_SPI_Init+0x240>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <HAL_SPI_Init+0x8c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a6f      	ldr	r2, [pc, #444]	@ (8005bf8 <HAL_SPI_Init+0x244>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d104      	bne.n	8005a4a <HAL_SPI_Init+0x96>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d901      	bls.n	8005a4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e0cd      	b.n	8005be6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fb fd6e 	bl	8001540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0201 	bic.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005a86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a90:	d119      	bne.n	8005ac6 <HAL_SPI_Init+0x112>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a9a:	d103      	bne.n	8005aa4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10c      	bne.n	8005ac6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005ab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ab4:	d107      	bne.n	8005ac6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ac4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00f      	beq.n	8005af2 <HAL_SPI_Init+0x13e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2b06      	cmp	r3, #6
 8005ad8:	d90b      	bls.n	8005af2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e007      	b.n	8005b02 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b14:	ea42 0103 	orr.w	r1, r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b62:	ea42 0103 	orr.w	r1, r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d113      	bne.n	8005ba2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b8c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ba0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40013000 	.word	0x40013000
 8005bf4:	40003800 	.word	0x40003800
 8005bf8:	40003c00 	.word	0x40003c00

08005bfc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3320      	adds	r3, #32
 8005c12:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c14:	f7fb ff2c 	bl	8001a70 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d001      	beq.n	8005c2a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005c26:	2302      	movs	r3, #2
 8005c28:	e1d1      	b.n	8005fce <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_SPI_Transmit+0x3a>
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e1c9      	b.n	8005fce <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_SPI_Transmit+0x4c>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e1c2      	b.n	8005fce <HAL_SPI_Transmit+0x3d2>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2203      	movs	r2, #3
 8005c54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	88fa      	ldrh	r2, [r7, #6]
 8005c72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005ca0:	d108      	bne.n	8005cb4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	e009      	b.n	8005cc8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005cc6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	4b96      	ldr	r3, [pc, #600]	@ (8005f28 <HAL_SPI_Transmit+0x32c>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	88f9      	ldrh	r1, [r7, #6]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cf4:	d107      	bne.n	8005d06 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2b0f      	cmp	r3, #15
 8005d0c:	d947      	bls.n	8005d9e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005d0e:	e03f      	b.n	8005d90 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d114      	bne.n	8005d48 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2e:	1d1a      	adds	r2, r3, #4
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005d46:	e023      	b.n	8005d90 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d48:	f7fb fe92 	bl	8001a70 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d803      	bhi.n	8005d60 <HAL_SPI_Transmit+0x164>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d102      	bne.n	8005d66 <HAL_SPI_Transmit+0x16a>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d114      	bne.n	8005d90 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f936 	bl	8005fd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e11e      	b.n	8005fce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1b9      	bne.n	8005d10 <HAL_SPI_Transmit+0x114>
 8005d9c:	e0f1      	b.n	8005f82 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	2b07      	cmp	r3, #7
 8005da4:	f240 80e6 	bls.w	8005f74 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005da8:	e05d      	b.n	8005e66 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d132      	bne.n	8005e1e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d918      	bls.n	8005df6 <HAL_SPI_Transmit+0x1fa>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d014      	beq.n	8005df6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ddc:	1d1a      	adds	r2, r3, #4
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3b02      	subs	r3, #2
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005df4:	e037      	b.n	8005e66 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfa:	881a      	ldrh	r2, [r3, #0]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e04:	1c9a      	adds	r2, r3, #2
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005e1c:	e023      	b.n	8005e66 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e1e:	f7fb fe27 	bl	8001a70 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d803      	bhi.n	8005e36 <HAL_SPI_Transmit+0x23a>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e34:	d102      	bne.n	8005e3c <HAL_SPI_Transmit+0x240>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d114      	bne.n	8005e66 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f8cb 	bl	8005fd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e0b3      	b.n	8005fce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d19b      	bne.n	8005daa <HAL_SPI_Transmit+0x1ae>
 8005e72:	e086      	b.n	8005f82 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d154      	bne.n	8005f2c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d918      	bls.n	8005ec0 <HAL_SPI_Transmit+0x2c4>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e92:	2b40      	cmp	r3, #64	@ 0x40
 8005e94:	d914      	bls.n	8005ec0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea6:	1d1a      	adds	r2, r3, #4
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b04      	subs	r3, #4
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005ebe:	e059      	b.n	8005f74 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d917      	bls.n	8005efc <HAL_SPI_Transmit+0x300>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d013      	beq.n	8005efc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed8:	881a      	ldrh	r2, [r3, #0]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee2:	1c9a      	adds	r2, r3, #2
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b02      	subs	r3, #2
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005efa:	e03b      	b.n	8005f74 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3320      	adds	r3, #32
 8005f06:	7812      	ldrb	r2, [r2, #0]
 8005f08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005f26:	e025      	b.n	8005f74 <HAL_SPI_Transmit+0x378>
 8005f28:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f2c:	f7fb fda0 	bl	8001a70 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d803      	bhi.n	8005f44 <HAL_SPI_Transmit+0x348>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	d102      	bne.n	8005f4a <HAL_SPI_Transmit+0x34e>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d114      	bne.n	8005f74 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f844 	bl	8005fd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e02c      	b.n	8005fce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f47f af79 	bne.w	8005e74 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2108      	movs	r1, #8
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f8c3 	bl	8006118 <SPI_WaitOnFlagUntilTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f9e:	f043 0220 	orr.w	r2, r3, #32
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f815 	bl	8005fd8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
  }
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop

08005fd8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0208 	orr.w	r2, r2, #8
 8005ff6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0210 	orr.w	r2, r2, #16
 8006006:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6919      	ldr	r1, [r3, #16]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b3c      	ldr	r3, [pc, #240]	@ (8006114 <SPI_CloseTransfer+0x13c>)
 8006024:	400b      	ands	r3, r1
 8006026:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006036:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b04      	cmp	r3, #4
 8006042:	d014      	beq.n	800606e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00f      	beq.n	800606e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006054:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699a      	ldr	r2, [r3, #24]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0220 	orr.w	r2, r2, #32
 800606c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b03      	cmp	r3, #3
 8006078:	d014      	beq.n	80060a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00f      	beq.n	80060a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800608a:	f043 0204 	orr.w	r2, r3, #4
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00f      	beq.n	80060ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060b4:	f043 0201 	orr.w	r2, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699a      	ldr	r2, [r3, #24]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00f      	beq.n	80060f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060de:	f043 0208 	orr.w	r2, r3, #8
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	fffffc90 	.word	0xfffffc90

08006118 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	4613      	mov	r3, r2
 8006126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006128:	e010      	b.n	800614c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800612a:	f7fb fca1 	bl	8001a70 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d803      	bhi.n	8006142 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d102      	bne.n	8006148 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e00f      	b.n	800616c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695a      	ldr	r2, [r3, #20]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4013      	ands	r3, r2
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	429a      	cmp	r2, r3
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	429a      	cmp	r2, r3
 8006168:	d0df      	beq.n	800612a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	3307      	adds	r3, #7
 8006192:	08db      	lsrs	r3, r3, #3
 8006194:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	fb02 f303 	mul.w	r3, r2, r3
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e042      	b.n	8006242 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fb fa96 	bl	8001700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2224      	movs	r2, #36	@ 0x24
 80061d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0201 	bic.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fd91 	bl	8006d1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f826 	bl	800624c <UART_SetConfig>
 8006200:	4603      	mov	r3, r0
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e01b      	b.n	8006242 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006218:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006228:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fe10 	bl	8006e60 <UART_CheckIdleState>
 8006240:	4603      	mov	r3, r0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800624c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006250:	b092      	sub	sp, #72	@ 0x48
 8006252:	af00      	add	r7, sp, #0
 8006254:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	431a      	orrs	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	431a      	orrs	r2, r3
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	4313      	orrs	r3, r2
 8006272:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4bbe      	ldr	r3, [pc, #760]	@ (8006574 <UART_SetConfig+0x328>)
 800627c:	4013      	ands	r3, r2
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006284:	430b      	orrs	r3, r1
 8006286:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4ab3      	ldr	r2, [pc, #716]	@ (8006578 <UART_SetConfig+0x32c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d004      	beq.n	80062b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062b4:	4313      	orrs	r3, r2
 80062b6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	4baf      	ldr	r3, [pc, #700]	@ (800657c <UART_SetConfig+0x330>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	f023 010f 	bic.w	r1, r3, #15
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4aa6      	ldr	r2, [pc, #664]	@ (8006580 <UART_SetConfig+0x334>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d177      	bne.n	80063dc <UART_SetConfig+0x190>
 80062ec:	4ba5      	ldr	r3, [pc, #660]	@ (8006584 <UART_SetConfig+0x338>)
 80062ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062f4:	2b28      	cmp	r3, #40	@ 0x28
 80062f6:	d86d      	bhi.n	80063d4 <UART_SetConfig+0x188>
 80062f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <UART_SetConfig+0xb4>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	080063a5 	.word	0x080063a5
 8006304:	080063d5 	.word	0x080063d5
 8006308:	080063d5 	.word	0x080063d5
 800630c:	080063d5 	.word	0x080063d5
 8006310:	080063d5 	.word	0x080063d5
 8006314:	080063d5 	.word	0x080063d5
 8006318:	080063d5 	.word	0x080063d5
 800631c:	080063d5 	.word	0x080063d5
 8006320:	080063ad 	.word	0x080063ad
 8006324:	080063d5 	.word	0x080063d5
 8006328:	080063d5 	.word	0x080063d5
 800632c:	080063d5 	.word	0x080063d5
 8006330:	080063d5 	.word	0x080063d5
 8006334:	080063d5 	.word	0x080063d5
 8006338:	080063d5 	.word	0x080063d5
 800633c:	080063d5 	.word	0x080063d5
 8006340:	080063b5 	.word	0x080063b5
 8006344:	080063d5 	.word	0x080063d5
 8006348:	080063d5 	.word	0x080063d5
 800634c:	080063d5 	.word	0x080063d5
 8006350:	080063d5 	.word	0x080063d5
 8006354:	080063d5 	.word	0x080063d5
 8006358:	080063d5 	.word	0x080063d5
 800635c:	080063d5 	.word	0x080063d5
 8006360:	080063bd 	.word	0x080063bd
 8006364:	080063d5 	.word	0x080063d5
 8006368:	080063d5 	.word	0x080063d5
 800636c:	080063d5 	.word	0x080063d5
 8006370:	080063d5 	.word	0x080063d5
 8006374:	080063d5 	.word	0x080063d5
 8006378:	080063d5 	.word	0x080063d5
 800637c:	080063d5 	.word	0x080063d5
 8006380:	080063c5 	.word	0x080063c5
 8006384:	080063d5 	.word	0x080063d5
 8006388:	080063d5 	.word	0x080063d5
 800638c:	080063d5 	.word	0x080063d5
 8006390:	080063d5 	.word	0x080063d5
 8006394:	080063d5 	.word	0x080063d5
 8006398:	080063d5 	.word	0x080063d5
 800639c:	080063d5 	.word	0x080063d5
 80063a0:	080063cd 	.word	0x080063cd
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063aa:	e222      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80063ac:	2304      	movs	r3, #4
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b2:	e21e      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80063b4:	2308      	movs	r3, #8
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ba:	e21a      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80063bc:	2310      	movs	r3, #16
 80063be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063c2:	e216      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80063c4:	2320      	movs	r3, #32
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ca:	e212      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80063cc:	2340      	movs	r3, #64	@ 0x40
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063d2:	e20e      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80063d4:	2380      	movs	r3, #128	@ 0x80
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063da:	e20a      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a69      	ldr	r2, [pc, #420]	@ (8006588 <UART_SetConfig+0x33c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d130      	bne.n	8006448 <UART_SetConfig+0x1fc>
 80063e6:	4b67      	ldr	r3, [pc, #412]	@ (8006584 <UART_SetConfig+0x338>)
 80063e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	2b05      	cmp	r3, #5
 80063f0:	d826      	bhi.n	8006440 <UART_SetConfig+0x1f4>
 80063f2:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <UART_SetConfig+0x1ac>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006411 	.word	0x08006411
 80063fc:	08006419 	.word	0x08006419
 8006400:	08006421 	.word	0x08006421
 8006404:	08006429 	.word	0x08006429
 8006408:	08006431 	.word	0x08006431
 800640c:	08006439 	.word	0x08006439
 8006410:	2300      	movs	r3, #0
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006416:	e1ec      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006418:	2304      	movs	r3, #4
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641e:	e1e8      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006420:	2308      	movs	r3, #8
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006426:	e1e4      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006428:	2310      	movs	r3, #16
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642e:	e1e0      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006430:	2320      	movs	r3, #32
 8006432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006436:	e1dc      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006438:	2340      	movs	r3, #64	@ 0x40
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643e:	e1d8      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006440:	2380      	movs	r3, #128	@ 0x80
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006446:	e1d4      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a4f      	ldr	r2, [pc, #316]	@ (800658c <UART_SetConfig+0x340>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d130      	bne.n	80064b4 <UART_SetConfig+0x268>
 8006452:	4b4c      	ldr	r3, [pc, #304]	@ (8006584 <UART_SetConfig+0x338>)
 8006454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	2b05      	cmp	r3, #5
 800645c:	d826      	bhi.n	80064ac <UART_SetConfig+0x260>
 800645e:	a201      	add	r2, pc, #4	@ (adr r2, 8006464 <UART_SetConfig+0x218>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	0800647d 	.word	0x0800647d
 8006468:	08006485 	.word	0x08006485
 800646c:	0800648d 	.word	0x0800648d
 8006470:	08006495 	.word	0x08006495
 8006474:	0800649d 	.word	0x0800649d
 8006478:	080064a5 	.word	0x080064a5
 800647c:	2300      	movs	r3, #0
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006482:	e1b6      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006484:	2304      	movs	r3, #4
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648a:	e1b2      	b.n	80067f2 <UART_SetConfig+0x5a6>
 800648c:	2308      	movs	r3, #8
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006492:	e1ae      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006494:	2310      	movs	r3, #16
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649a:	e1aa      	b.n	80067f2 <UART_SetConfig+0x5a6>
 800649c:	2320      	movs	r3, #32
 800649e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064a2:	e1a6      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80064a4:	2340      	movs	r3, #64	@ 0x40
 80064a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064aa:	e1a2      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80064ac:	2380      	movs	r3, #128	@ 0x80
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b2:	e19e      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a35      	ldr	r2, [pc, #212]	@ (8006590 <UART_SetConfig+0x344>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d130      	bne.n	8006520 <UART_SetConfig+0x2d4>
 80064be:	4b31      	ldr	r3, [pc, #196]	@ (8006584 <UART_SetConfig+0x338>)
 80064c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	2b05      	cmp	r3, #5
 80064c8:	d826      	bhi.n	8006518 <UART_SetConfig+0x2cc>
 80064ca:	a201      	add	r2, pc, #4	@ (adr r2, 80064d0 <UART_SetConfig+0x284>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	080064e9 	.word	0x080064e9
 80064d4:	080064f1 	.word	0x080064f1
 80064d8:	080064f9 	.word	0x080064f9
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006509 	.word	0x08006509
 80064e4:	08006511 	.word	0x08006511
 80064e8:	2300      	movs	r3, #0
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ee:	e180      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80064f0:	2304      	movs	r3, #4
 80064f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f6:	e17c      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80064f8:	2308      	movs	r3, #8
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fe:	e178      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006500:	2310      	movs	r3, #16
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006506:	e174      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006508:	2320      	movs	r3, #32
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650e:	e170      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006510:	2340      	movs	r3, #64	@ 0x40
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006516:	e16c      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006518:	2380      	movs	r3, #128	@ 0x80
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651e:	e168      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1b      	ldr	r2, [pc, #108]	@ (8006594 <UART_SetConfig+0x348>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d142      	bne.n	80065b0 <UART_SetConfig+0x364>
 800652a:	4b16      	ldr	r3, [pc, #88]	@ (8006584 <UART_SetConfig+0x338>)
 800652c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	2b05      	cmp	r3, #5
 8006534:	d838      	bhi.n	80065a8 <UART_SetConfig+0x35c>
 8006536:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <UART_SetConfig+0x2f0>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	08006555 	.word	0x08006555
 8006540:	0800655d 	.word	0x0800655d
 8006544:	08006565 	.word	0x08006565
 8006548:	0800656d 	.word	0x0800656d
 800654c:	08006599 	.word	0x08006599
 8006550:	080065a1 	.word	0x080065a1
 8006554:	2300      	movs	r3, #0
 8006556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655a:	e14a      	b.n	80067f2 <UART_SetConfig+0x5a6>
 800655c:	2304      	movs	r3, #4
 800655e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006562:	e146      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006564:	2308      	movs	r3, #8
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656a:	e142      	b.n	80067f2 <UART_SetConfig+0x5a6>
 800656c:	2310      	movs	r3, #16
 800656e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006572:	e13e      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006574:	cfff69f3 	.word	0xcfff69f3
 8006578:	58000c00 	.word	0x58000c00
 800657c:	11fff4ff 	.word	0x11fff4ff
 8006580:	40011000 	.word	0x40011000
 8006584:	58024400 	.word	0x58024400
 8006588:	40004400 	.word	0x40004400
 800658c:	40004800 	.word	0x40004800
 8006590:	40004c00 	.word	0x40004c00
 8006594:	40005000 	.word	0x40005000
 8006598:	2320      	movs	r3, #32
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659e:	e128      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80065a0:	2340      	movs	r3, #64	@ 0x40
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e124      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80065a8:	2380      	movs	r3, #128	@ 0x80
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e120      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4acb      	ldr	r2, [pc, #812]	@ (80068e4 <UART_SetConfig+0x698>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d176      	bne.n	80066a8 <UART_SetConfig+0x45c>
 80065ba:	4bcb      	ldr	r3, [pc, #812]	@ (80068e8 <UART_SetConfig+0x69c>)
 80065bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065c2:	2b28      	cmp	r3, #40	@ 0x28
 80065c4:	d86c      	bhi.n	80066a0 <UART_SetConfig+0x454>
 80065c6:	a201      	add	r2, pc, #4	@ (adr r2, 80065cc <UART_SetConfig+0x380>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	08006671 	.word	0x08006671
 80065d0:	080066a1 	.word	0x080066a1
 80065d4:	080066a1 	.word	0x080066a1
 80065d8:	080066a1 	.word	0x080066a1
 80065dc:	080066a1 	.word	0x080066a1
 80065e0:	080066a1 	.word	0x080066a1
 80065e4:	080066a1 	.word	0x080066a1
 80065e8:	080066a1 	.word	0x080066a1
 80065ec:	08006679 	.word	0x08006679
 80065f0:	080066a1 	.word	0x080066a1
 80065f4:	080066a1 	.word	0x080066a1
 80065f8:	080066a1 	.word	0x080066a1
 80065fc:	080066a1 	.word	0x080066a1
 8006600:	080066a1 	.word	0x080066a1
 8006604:	080066a1 	.word	0x080066a1
 8006608:	080066a1 	.word	0x080066a1
 800660c:	08006681 	.word	0x08006681
 8006610:	080066a1 	.word	0x080066a1
 8006614:	080066a1 	.word	0x080066a1
 8006618:	080066a1 	.word	0x080066a1
 800661c:	080066a1 	.word	0x080066a1
 8006620:	080066a1 	.word	0x080066a1
 8006624:	080066a1 	.word	0x080066a1
 8006628:	080066a1 	.word	0x080066a1
 800662c:	08006689 	.word	0x08006689
 8006630:	080066a1 	.word	0x080066a1
 8006634:	080066a1 	.word	0x080066a1
 8006638:	080066a1 	.word	0x080066a1
 800663c:	080066a1 	.word	0x080066a1
 8006640:	080066a1 	.word	0x080066a1
 8006644:	080066a1 	.word	0x080066a1
 8006648:	080066a1 	.word	0x080066a1
 800664c:	08006691 	.word	0x08006691
 8006650:	080066a1 	.word	0x080066a1
 8006654:	080066a1 	.word	0x080066a1
 8006658:	080066a1 	.word	0x080066a1
 800665c:	080066a1 	.word	0x080066a1
 8006660:	080066a1 	.word	0x080066a1
 8006664:	080066a1 	.word	0x080066a1
 8006668:	080066a1 	.word	0x080066a1
 800666c:	08006699 	.word	0x08006699
 8006670:	2301      	movs	r3, #1
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006676:	e0bc      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006678:	2304      	movs	r3, #4
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667e:	e0b8      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006680:	2308      	movs	r3, #8
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006686:	e0b4      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006688:	2310      	movs	r3, #16
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668e:	e0b0      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006690:	2320      	movs	r3, #32
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006696:	e0ac      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006698:	2340      	movs	r3, #64	@ 0x40
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669e:	e0a8      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80066a0:	2380      	movs	r3, #128	@ 0x80
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066a6:	e0a4      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a8f      	ldr	r2, [pc, #572]	@ (80068ec <UART_SetConfig+0x6a0>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d130      	bne.n	8006714 <UART_SetConfig+0x4c8>
 80066b2:	4b8d      	ldr	r3, [pc, #564]	@ (80068e8 <UART_SetConfig+0x69c>)
 80066b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b05      	cmp	r3, #5
 80066bc:	d826      	bhi.n	800670c <UART_SetConfig+0x4c0>
 80066be:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <UART_SetConfig+0x478>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066dd 	.word	0x080066dd
 80066c8:	080066e5 	.word	0x080066e5
 80066cc:	080066ed 	.word	0x080066ed
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	080066fd 	.word	0x080066fd
 80066d8:	08006705 	.word	0x08006705
 80066dc:	2300      	movs	r3, #0
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e086      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80066e4:	2304      	movs	r3, #4
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e082      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80066ec:	2308      	movs	r3, #8
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e07e      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80066f4:	2310      	movs	r3, #16
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e07a      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80066fc:	2320      	movs	r3, #32
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006702:	e076      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006704:	2340      	movs	r3, #64	@ 0x40
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670a:	e072      	b.n	80067f2 <UART_SetConfig+0x5a6>
 800670c:	2380      	movs	r3, #128	@ 0x80
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006712:	e06e      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a75      	ldr	r2, [pc, #468]	@ (80068f0 <UART_SetConfig+0x6a4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d130      	bne.n	8006780 <UART_SetConfig+0x534>
 800671e:	4b72      	ldr	r3, [pc, #456]	@ (80068e8 <UART_SetConfig+0x69c>)
 8006720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	2b05      	cmp	r3, #5
 8006728:	d826      	bhi.n	8006778 <UART_SetConfig+0x52c>
 800672a:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <UART_SetConfig+0x4e4>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006749 	.word	0x08006749
 8006734:	08006751 	.word	0x08006751
 8006738:	08006759 	.word	0x08006759
 800673c:	08006761 	.word	0x08006761
 8006740:	08006769 	.word	0x08006769
 8006744:	08006771 	.word	0x08006771
 8006748:	2300      	movs	r3, #0
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e050      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006750:	2304      	movs	r3, #4
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006756:	e04c      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006758:	2308      	movs	r3, #8
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675e:	e048      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006760:	2310      	movs	r3, #16
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006766:	e044      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006768:	2320      	movs	r3, #32
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676e:	e040      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006770:	2340      	movs	r3, #64	@ 0x40
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006776:	e03c      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006778:	2380      	movs	r3, #128	@ 0x80
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677e:	e038      	b.n	80067f2 <UART_SetConfig+0x5a6>
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a5b      	ldr	r2, [pc, #364]	@ (80068f4 <UART_SetConfig+0x6a8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d130      	bne.n	80067ec <UART_SetConfig+0x5a0>
 800678a:	4b57      	ldr	r3, [pc, #348]	@ (80068e8 <UART_SetConfig+0x69c>)
 800678c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	2b05      	cmp	r3, #5
 8006794:	d826      	bhi.n	80067e4 <UART_SetConfig+0x598>
 8006796:	a201      	add	r2, pc, #4	@ (adr r2, 800679c <UART_SetConfig+0x550>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067b5 	.word	0x080067b5
 80067a0:	080067bd 	.word	0x080067bd
 80067a4:	080067c5 	.word	0x080067c5
 80067a8:	080067cd 	.word	0x080067cd
 80067ac:	080067d5 	.word	0x080067d5
 80067b0:	080067dd 	.word	0x080067dd
 80067b4:	2302      	movs	r3, #2
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ba:	e01a      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80067bc:	2304      	movs	r3, #4
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c2:	e016      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80067c4:	2308      	movs	r3, #8
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ca:	e012      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80067cc:	2310      	movs	r3, #16
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d2:	e00e      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80067d4:	2320      	movs	r3, #32
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067da:	e00a      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80067dc:	2340      	movs	r3, #64	@ 0x40
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e2:	e006      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80067e4:	2380      	movs	r3, #128	@ 0x80
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ea:	e002      	b.n	80067f2 <UART_SetConfig+0x5a6>
 80067ec:	2380      	movs	r3, #128	@ 0x80
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a3f      	ldr	r2, [pc, #252]	@ (80068f4 <UART_SetConfig+0x6a8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	f040 80f8 	bne.w	80069ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006802:	2b20      	cmp	r3, #32
 8006804:	dc46      	bgt.n	8006894 <UART_SetConfig+0x648>
 8006806:	2b02      	cmp	r3, #2
 8006808:	f2c0 8082 	blt.w	8006910 <UART_SetConfig+0x6c4>
 800680c:	3b02      	subs	r3, #2
 800680e:	2b1e      	cmp	r3, #30
 8006810:	d87e      	bhi.n	8006910 <UART_SetConfig+0x6c4>
 8006812:	a201      	add	r2, pc, #4	@ (adr r2, 8006818 <UART_SetConfig+0x5cc>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	0800689b 	.word	0x0800689b
 800681c:	08006911 	.word	0x08006911
 8006820:	080068a3 	.word	0x080068a3
 8006824:	08006911 	.word	0x08006911
 8006828:	08006911 	.word	0x08006911
 800682c:	08006911 	.word	0x08006911
 8006830:	080068b3 	.word	0x080068b3
 8006834:	08006911 	.word	0x08006911
 8006838:	08006911 	.word	0x08006911
 800683c:	08006911 	.word	0x08006911
 8006840:	08006911 	.word	0x08006911
 8006844:	08006911 	.word	0x08006911
 8006848:	08006911 	.word	0x08006911
 800684c:	08006911 	.word	0x08006911
 8006850:	080068c3 	.word	0x080068c3
 8006854:	08006911 	.word	0x08006911
 8006858:	08006911 	.word	0x08006911
 800685c:	08006911 	.word	0x08006911
 8006860:	08006911 	.word	0x08006911
 8006864:	08006911 	.word	0x08006911
 8006868:	08006911 	.word	0x08006911
 800686c:	08006911 	.word	0x08006911
 8006870:	08006911 	.word	0x08006911
 8006874:	08006911 	.word	0x08006911
 8006878:	08006911 	.word	0x08006911
 800687c:	08006911 	.word	0x08006911
 8006880:	08006911 	.word	0x08006911
 8006884:	08006911 	.word	0x08006911
 8006888:	08006911 	.word	0x08006911
 800688c:	08006911 	.word	0x08006911
 8006890:	08006903 	.word	0x08006903
 8006894:	2b40      	cmp	r3, #64	@ 0x40
 8006896:	d037      	beq.n	8006908 <UART_SetConfig+0x6bc>
 8006898:	e03a      	b.n	8006910 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800689a:	f7fe fc69 	bl	8005170 <HAL_RCCEx_GetD3PCLK1Freq>
 800689e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068a0:	e03c      	b.n	800691c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe fc78 	bl	800519c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068b0:	e034      	b.n	800691c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068b2:	f107 0318 	add.w	r3, r7, #24
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe fdc4 	bl	8005444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c0:	e02c      	b.n	800691c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068c2:	4b09      	ldr	r3, [pc, #36]	@ (80068e8 <UART_SetConfig+0x69c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d016      	beq.n	80068fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068ce:	4b06      	ldr	r3, [pc, #24]	@ (80068e8 <UART_SetConfig+0x69c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	08db      	lsrs	r3, r3, #3
 80068d4:	f003 0303 	and.w	r3, r3, #3
 80068d8:	4a07      	ldr	r2, [pc, #28]	@ (80068f8 <UART_SetConfig+0x6ac>)
 80068da:	fa22 f303 	lsr.w	r3, r2, r3
 80068de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068e0:	e01c      	b.n	800691c <UART_SetConfig+0x6d0>
 80068e2:	bf00      	nop
 80068e4:	40011400 	.word	0x40011400
 80068e8:	58024400 	.word	0x58024400
 80068ec:	40007800 	.word	0x40007800
 80068f0:	40007c00 	.word	0x40007c00
 80068f4:	58000c00 	.word	0x58000c00
 80068f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80068fc:	4b9d      	ldr	r3, [pc, #628]	@ (8006b74 <UART_SetConfig+0x928>)
 80068fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006900:	e00c      	b.n	800691c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006902:	4b9d      	ldr	r3, [pc, #628]	@ (8006b78 <UART_SetConfig+0x92c>)
 8006904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006906:	e009      	b.n	800691c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006908:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800690c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690e:	e005      	b.n	800691c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800691a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800691c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 81de 	beq.w	8006ce0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	4a94      	ldr	r2, [pc, #592]	@ (8006b7c <UART_SetConfig+0x930>)
 800692a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800692e:	461a      	mov	r2, r3
 8006930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006932:	fbb3 f3f2 	udiv	r3, r3, r2
 8006936:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	4413      	add	r3, r2
 8006942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006944:	429a      	cmp	r2, r3
 8006946:	d305      	bcc.n	8006954 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800694e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006950:	429a      	cmp	r2, r3
 8006952:	d903      	bls.n	800695c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800695a:	e1c1      	b.n	8006ce0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800695c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800695e:	2200      	movs	r2, #0
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	60fa      	str	r2, [r7, #12]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	4a84      	ldr	r2, [pc, #528]	@ (8006b7c <UART_SetConfig+0x930>)
 800696a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800696e:	b29b      	uxth	r3, r3
 8006970:	2200      	movs	r2, #0
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	607a      	str	r2, [r7, #4]
 8006976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800697a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800697e:	f7f9 fcab 	bl	80002d8 <__aeabi_uldivmod>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4610      	mov	r0, r2
 8006988:	4619      	mov	r1, r3
 800698a:	f04f 0200 	mov.w	r2, #0
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	020b      	lsls	r3, r1, #8
 8006994:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006998:	0202      	lsls	r2, r0, #8
 800699a:	6979      	ldr	r1, [r7, #20]
 800699c:	6849      	ldr	r1, [r1, #4]
 800699e:	0849      	lsrs	r1, r1, #1
 80069a0:	2000      	movs	r0, #0
 80069a2:	460c      	mov	r4, r1
 80069a4:	4605      	mov	r5, r0
 80069a6:	eb12 0804 	adds.w	r8, r2, r4
 80069aa:	eb43 0905 	adc.w	r9, r3, r5
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	469a      	mov	sl, r3
 80069b6:	4693      	mov	fp, r2
 80069b8:	4652      	mov	r2, sl
 80069ba:	465b      	mov	r3, fp
 80069bc:	4640      	mov	r0, r8
 80069be:	4649      	mov	r1, r9
 80069c0:	f7f9 fc8a 	bl	80002d8 <__aeabi_uldivmod>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4613      	mov	r3, r2
 80069ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069d2:	d308      	bcc.n	80069e6 <UART_SetConfig+0x79a>
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069da:	d204      	bcs.n	80069e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069e2:	60da      	str	r2, [r3, #12]
 80069e4:	e17c      	b.n	8006ce0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80069ec:	e178      	b.n	8006ce0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069f6:	f040 80c5 	bne.w	8006b84 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80069fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	dc48      	bgt.n	8006a94 <UART_SetConfig+0x848>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	db7b      	blt.n	8006afe <UART_SetConfig+0x8b2>
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d879      	bhi.n	8006afe <UART_SetConfig+0x8b2>
 8006a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a10 <UART_SetConfig+0x7c4>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a9b 	.word	0x08006a9b
 8006a14:	08006aa3 	.word	0x08006aa3
 8006a18:	08006aff 	.word	0x08006aff
 8006a1c:	08006aff 	.word	0x08006aff
 8006a20:	08006aab 	.word	0x08006aab
 8006a24:	08006aff 	.word	0x08006aff
 8006a28:	08006aff 	.word	0x08006aff
 8006a2c:	08006aff 	.word	0x08006aff
 8006a30:	08006abb 	.word	0x08006abb
 8006a34:	08006aff 	.word	0x08006aff
 8006a38:	08006aff 	.word	0x08006aff
 8006a3c:	08006aff 	.word	0x08006aff
 8006a40:	08006aff 	.word	0x08006aff
 8006a44:	08006aff 	.word	0x08006aff
 8006a48:	08006aff 	.word	0x08006aff
 8006a4c:	08006aff 	.word	0x08006aff
 8006a50:	08006acb 	.word	0x08006acb
 8006a54:	08006aff 	.word	0x08006aff
 8006a58:	08006aff 	.word	0x08006aff
 8006a5c:	08006aff 	.word	0x08006aff
 8006a60:	08006aff 	.word	0x08006aff
 8006a64:	08006aff 	.word	0x08006aff
 8006a68:	08006aff 	.word	0x08006aff
 8006a6c:	08006aff 	.word	0x08006aff
 8006a70:	08006aff 	.word	0x08006aff
 8006a74:	08006aff 	.word	0x08006aff
 8006a78:	08006aff 	.word	0x08006aff
 8006a7c:	08006aff 	.word	0x08006aff
 8006a80:	08006aff 	.word	0x08006aff
 8006a84:	08006aff 	.word	0x08006aff
 8006a88:	08006aff 	.word	0x08006aff
 8006a8c:	08006aff 	.word	0x08006aff
 8006a90:	08006af1 	.word	0x08006af1
 8006a94:	2b40      	cmp	r3, #64	@ 0x40
 8006a96:	d02e      	beq.n	8006af6 <UART_SetConfig+0x8aa>
 8006a98:	e031      	b.n	8006afe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a9a:	f7fd f933 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006a9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006aa0:	e033      	b.n	8006b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa2:	f7fd f945 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8006aa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006aa8:	e02f      	b.n	8006b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe fb74 	bl	800519c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ab8:	e027      	b.n	8006b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aba:	f107 0318 	add.w	r3, r7, #24
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fcc0 	bl	8005444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac8:	e01f      	b.n	8006b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aca:	4b2d      	ldr	r3, [pc, #180]	@ (8006b80 <UART_SetConfig+0x934>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d009      	beq.n	8006aea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b80 <UART_SetConfig+0x934>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	08db      	lsrs	r3, r3, #3
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	4a24      	ldr	r2, [pc, #144]	@ (8006b74 <UART_SetConfig+0x928>)
 8006ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ae8:	e00f      	b.n	8006b0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006aea:	4b22      	ldr	r3, [pc, #136]	@ (8006b74 <UART_SetConfig+0x928>)
 8006aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aee:	e00c      	b.n	8006b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006af0:	4b21      	ldr	r3, [pc, #132]	@ (8006b78 <UART_SetConfig+0x92c>)
 8006af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006af4:	e009      	b.n	8006b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006afc:	e005      	b.n	8006b0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80e7 	beq.w	8006ce0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	4a19      	ldr	r2, [pc, #100]	@ (8006b7c <UART_SetConfig+0x930>)
 8006b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b24:	005a      	lsls	r2, r3, #1
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	441a      	add	r2, r3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3a:	2b0f      	cmp	r3, #15
 8006b3c:	d916      	bls.n	8006b6c <UART_SetConfig+0x920>
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b44:	d212      	bcs.n	8006b6c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f023 030f 	bic.w	r3, r3, #15
 8006b4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b52:	085b      	lsrs	r3, r3, #1
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006b68:	60da      	str	r2, [r3, #12]
 8006b6a:	e0b9      	b.n	8006ce0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b72:	e0b5      	b.n	8006ce0 <UART_SetConfig+0xa94>
 8006b74:	03d09000 	.word	0x03d09000
 8006b78:	003d0900 	.word	0x003d0900
 8006b7c:	080079f4 	.word	0x080079f4
 8006b80:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b84:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	dc49      	bgt.n	8006c20 <UART_SetConfig+0x9d4>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	db7c      	blt.n	8006c8a <UART_SetConfig+0xa3e>
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d87a      	bhi.n	8006c8a <UART_SetConfig+0xa3e>
 8006b94:	a201      	add	r2, pc, #4	@ (adr r2, 8006b9c <UART_SetConfig+0x950>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006c27 	.word	0x08006c27
 8006ba0:	08006c2f 	.word	0x08006c2f
 8006ba4:	08006c8b 	.word	0x08006c8b
 8006ba8:	08006c8b 	.word	0x08006c8b
 8006bac:	08006c37 	.word	0x08006c37
 8006bb0:	08006c8b 	.word	0x08006c8b
 8006bb4:	08006c8b 	.word	0x08006c8b
 8006bb8:	08006c8b 	.word	0x08006c8b
 8006bbc:	08006c47 	.word	0x08006c47
 8006bc0:	08006c8b 	.word	0x08006c8b
 8006bc4:	08006c8b 	.word	0x08006c8b
 8006bc8:	08006c8b 	.word	0x08006c8b
 8006bcc:	08006c8b 	.word	0x08006c8b
 8006bd0:	08006c8b 	.word	0x08006c8b
 8006bd4:	08006c8b 	.word	0x08006c8b
 8006bd8:	08006c8b 	.word	0x08006c8b
 8006bdc:	08006c57 	.word	0x08006c57
 8006be0:	08006c8b 	.word	0x08006c8b
 8006be4:	08006c8b 	.word	0x08006c8b
 8006be8:	08006c8b 	.word	0x08006c8b
 8006bec:	08006c8b 	.word	0x08006c8b
 8006bf0:	08006c8b 	.word	0x08006c8b
 8006bf4:	08006c8b 	.word	0x08006c8b
 8006bf8:	08006c8b 	.word	0x08006c8b
 8006bfc:	08006c8b 	.word	0x08006c8b
 8006c00:	08006c8b 	.word	0x08006c8b
 8006c04:	08006c8b 	.word	0x08006c8b
 8006c08:	08006c8b 	.word	0x08006c8b
 8006c0c:	08006c8b 	.word	0x08006c8b
 8006c10:	08006c8b 	.word	0x08006c8b
 8006c14:	08006c8b 	.word	0x08006c8b
 8006c18:	08006c8b 	.word	0x08006c8b
 8006c1c:	08006c7d 	.word	0x08006c7d
 8006c20:	2b40      	cmp	r3, #64	@ 0x40
 8006c22:	d02e      	beq.n	8006c82 <UART_SetConfig+0xa36>
 8006c24:	e031      	b.n	8006c8a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c26:	f7fd f86d 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c2c:	e033      	b.n	8006c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c2e:	f7fd f87f 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8006c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c34:	e02f      	b.n	8006c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe faae 	bl	800519c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c44:	e027      	b.n	8006c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c46:	f107 0318 	add.w	r3, r7, #24
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe fbfa 	bl	8005444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c54:	e01f      	b.n	8006c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c56:	4b2d      	ldr	r3, [pc, #180]	@ (8006d0c <UART_SetConfig+0xac0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c62:	4b2a      	ldr	r3, [pc, #168]	@ (8006d0c <UART_SetConfig+0xac0>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	08db      	lsrs	r3, r3, #3
 8006c68:	f003 0303 	and.w	r3, r3, #3
 8006c6c:	4a28      	ldr	r2, [pc, #160]	@ (8006d10 <UART_SetConfig+0xac4>)
 8006c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c74:	e00f      	b.n	8006c96 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006c76:	4b26      	ldr	r3, [pc, #152]	@ (8006d10 <UART_SetConfig+0xac4>)
 8006c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c7a:	e00c      	b.n	8006c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c7c:	4b25      	ldr	r3, [pc, #148]	@ (8006d14 <UART_SetConfig+0xac8>)
 8006c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c80:	e009      	b.n	8006c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c88:	e005      	b.n	8006c96 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c94:	bf00      	nop
    }

    if (pclk != 0U)
 8006c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d021      	beq.n	8006ce0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d18 <UART_SetConfig+0xacc>)
 8006ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006caa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	085b      	lsrs	r3, r3, #1
 8006cb4:	441a      	add	r2, r3
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc2:	2b0f      	cmp	r3, #15
 8006cc4:	d909      	bls.n	8006cda <UART_SetConfig+0xa8e>
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ccc:	d205      	bcs.n	8006cda <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60da      	str	r2, [r3, #12]
 8006cd8:	e002      	b.n	8006ce0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006cfc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3748      	adds	r7, #72	@ 0x48
 8006d04:	46bd      	mov	sp, r7
 8006d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d0a:	bf00      	nop
 8006d0c:	58024400 	.word	0x58024400
 8006d10:	03d09000 	.word	0x03d09000
 8006d14:	003d0900 	.word	0x003d0900
 8006d18:	080079f4 	.word	0x080079f4

08006d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db0:	f003 0310 	and.w	r3, r3, #16
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01a      	beq.n	8006e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e1a:	d10a      	bne.n	8006e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]
  }
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b098      	sub	sp, #96	@ 0x60
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e70:	f7fa fdfe 	bl	8001a70 <HAL_GetTick>
 8006e74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d12f      	bne.n	8006ee4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f88e 	bl	8006fb4 <UART_WaitOnFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d022      	beq.n	8006ee4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ebe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e6      	bne.n	8006e9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e063      	b.n	8006fac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d149      	bne.n	8006f86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006efa:	2200      	movs	r2, #0
 8006efc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f857 	bl	8006fb4 <UART_WaitOnFlagUntilTimeout>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d03c      	beq.n	8006f86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	623b      	str	r3, [r7, #32]
   return(result);
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e6      	bne.n	8006f0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f5e:	61fa      	str	r2, [r7, #28]
 8006f60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	69b9      	ldr	r1, [r7, #24]
 8006f64:	69fa      	ldr	r2, [r7, #28]
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e5      	bne.n	8006f3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e012      	b.n	8006fac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3758      	adds	r7, #88	@ 0x58
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc4:	e04f      	b.n	8007066 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d04b      	beq.n	8007066 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fce:	f7fa fd4f 	bl	8001a70 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d302      	bcc.n	8006fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e04e      	b.n	8007086 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d037      	beq.n	8007066 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b80      	cmp	r3, #128	@ 0x80
 8006ffa:	d034      	beq.n	8007066 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b40      	cmp	r3, #64	@ 0x40
 8007000:	d031      	beq.n	8007066 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b08      	cmp	r3, #8
 800700e:	d110      	bne.n	8007032 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2208      	movs	r2, #8
 8007016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f839 	bl	8007090 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2208      	movs	r2, #8
 8007022:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e029      	b.n	8007086 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800703c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007040:	d111      	bne.n	8007066 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800704a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 f81f 	bl	8007090 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2220      	movs	r2, #32
 8007056:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e00f      	b.n	8007086 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69da      	ldr	r2, [r3, #28]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	4013      	ands	r3, r2
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	429a      	cmp	r2, r3
 8007074:	bf0c      	ite	eq
 8007076:	2301      	moveq	r3, #1
 8007078:	2300      	movne	r3, #0
 800707a:	b2db      	uxtb	r3, r3
 800707c:	461a      	mov	r2, r3
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	429a      	cmp	r2, r3
 8007082:	d0a0      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007090:	b480      	push	{r7}
 8007092:	b095      	sub	sp, #84	@ 0x54
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80070b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e6      	bne.n	8007098 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3308      	adds	r3, #8
 80070d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007158 <UART_EndRxTransfer+0xc8>)
 80070de:	4013      	ands	r3, r2
 80070e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3308      	adds	r3, #8
 80070e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e5      	bne.n	80070ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007102:	2b01      	cmp	r3, #1
 8007104:	d118      	bne.n	8007138 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	60bb      	str	r3, [r7, #8]
   return(result);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f023 0310 	bic.w	r3, r3, #16
 800711a:	647b      	str	r3, [r7, #68]	@ 0x44
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007124:	61bb      	str	r3, [r7, #24]
 8007126:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6979      	ldr	r1, [r7, #20]
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	613b      	str	r3, [r7, #16]
   return(result);
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e6      	bne.n	8007106 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800714c:	bf00      	nop
 800714e:	3754      	adds	r7, #84	@ 0x54
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	effffffe 	.word	0xeffffffe

0800715c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_UARTEx_DisableFifoMode+0x16>
 800716e:	2302      	movs	r3, #2
 8007170:	e027      	b.n	80071c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2224      	movs	r2, #36	@ 0x24
 800717e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0201 	bic.w	r2, r2, #1
 8007198:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e02d      	b.n	8007242 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2224      	movs	r2, #36	@ 0x24
 80071f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0201 	bic.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f850 	bl	80072c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800725e:	2302      	movs	r3, #2
 8007260:	e02d      	b.n	80072be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2224      	movs	r2, #36	@ 0x24
 800726e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f022 0201 	bic.w	r2, r2, #1
 8007288:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f812 	bl	80072c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d108      	bne.n	80072ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072e8:	e031      	b.n	800734e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072ea:	2310      	movs	r3, #16
 80072ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072ee:	2310      	movs	r3, #16
 80072f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	0e5b      	lsrs	r3, r3, #25
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	0f5b      	lsrs	r3, r3, #29
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	7b3a      	ldrb	r2, [r7, #12]
 8007316:	4911      	ldr	r1, [pc, #68]	@ (800735c <UARTEx_SetNbDataToProcess+0x94>)
 8007318:	5c8a      	ldrb	r2, [r1, r2]
 800731a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800731e:	7b3a      	ldrb	r2, [r7, #12]
 8007320:	490f      	ldr	r1, [pc, #60]	@ (8007360 <UARTEx_SetNbDataToProcess+0x98>)
 8007322:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007324:	fb93 f3f2 	sdiv	r3, r3, r2
 8007328:	b29a      	uxth	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	7b7a      	ldrb	r2, [r7, #13]
 8007334:	4909      	ldr	r1, [pc, #36]	@ (800735c <UARTEx_SetNbDataToProcess+0x94>)
 8007336:	5c8a      	ldrb	r2, [r1, r2]
 8007338:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800733c:	7b7a      	ldrb	r2, [r7, #13]
 800733e:	4908      	ldr	r1, [pc, #32]	@ (8007360 <UARTEx_SetNbDataToProcess+0x98>)
 8007340:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007342:	fb93 f3f2 	sdiv	r3, r3, r2
 8007346:	b29a      	uxth	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800734e:	bf00      	nop
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	08007a0c 	.word	0x08007a0c
 8007360:	08007a14 	.word	0x08007a14

08007364 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007364:	b084      	sub	sp, #16
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	f107 001c 	add.w	r0, r7, #28
 8007372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007376:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800737a:	2b01      	cmp	r3, #1
 800737c:	d121      	bne.n	80073c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007382:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	4b2c      	ldr	r3, [pc, #176]	@ (8007440 <USB_CoreInit+0xdc>)
 8007390:	4013      	ands	r3, r2
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d105      	bne.n	80073b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 faaa 	bl	8007910 <USB_CoreReset>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]
 80073c0:	e01b      	b.n	80073fa <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa9e 	bl	8007910 <USB_CoreReset>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80073ec:	e005      	b.n	80073fa <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073fa:	7fbb      	ldrb	r3, [r7, #30]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d116      	bne.n	800742e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007404:	b29a      	uxth	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800740e:	4b0d      	ldr	r3, [pc, #52]	@ (8007444 <USB_CoreInit+0xe0>)
 8007410:	4313      	orrs	r3, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f043 0206 	orr.w	r2, r3, #6
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f043 0220 	orr.w	r2, r3, #32
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800743a:	b004      	add	sp, #16
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	ffbdffbf 	.word	0xffbdffbf
 8007444:	03ee0000 	.word	0x03ee0000

08007448 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f023 0201 	bic.w	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d115      	bne.n	80074b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007498:	200a      	movs	r0, #10
 800749a:	f7fa faf5 	bl	8001a88 <HAL_Delay>
      ms += 10U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	330a      	adds	r3, #10
 80074a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fa25 	bl	80078f4 <USB_GetMode>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d01e      	beq.n	80074ee <USB_SetCurrentMode+0x84>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80074b4:	d9f0      	bls.n	8007498 <USB_SetCurrentMode+0x2e>
 80074b6:	e01a      	b.n	80074ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d115      	bne.n	80074ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074ca:	200a      	movs	r0, #10
 80074cc:	f7fa fadc 	bl	8001a88 <HAL_Delay>
      ms += 10U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	330a      	adds	r3, #10
 80074d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fa0c 	bl	80078f4 <USB_GetMode>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <USB_SetCurrentMode+0x84>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80074e6:	d9f0      	bls.n	80074ca <USB_SetCurrentMode+0x60>
 80074e8:	e001      	b.n	80074ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e005      	b.n	80074fa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2bc8      	cmp	r3, #200	@ 0xc8
 80074f2:	d101      	bne.n	80074f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007504:	b084      	sub	sp, #16
 8007506:	b580      	push	{r7, lr}
 8007508:	b086      	sub	sp, #24
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	e009      	b.n	8007538 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3340      	adds	r3, #64	@ 0x40
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	2200      	movs	r2, #0
 8007530:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	3301      	adds	r3, #1
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b0e      	cmp	r3, #14
 800753c:	d9f2      	bls.n	8007524 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800753e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007542:	2b00      	cmp	r3, #0
 8007544:	d11c      	bne.n	8007580 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007554:	f043 0302 	orr.w	r3, r3, #2
 8007558:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e005      	b.n	800758c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007584:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007592:	461a      	mov	r2, r3
 8007594:	2300      	movs	r3, #0
 8007596:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007598:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800759c:	2b01      	cmp	r3, #1
 800759e:	d10d      	bne.n	80075bc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075a8:	2100      	movs	r1, #0
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f968 	bl	8007880 <USB_SetDevSpeed>
 80075b0:	e008      	b.n	80075c4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075b2:	2101      	movs	r1, #1
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f963 	bl	8007880 <USB_SetDevSpeed>
 80075ba:	e003      	b.n	80075c4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075bc:	2103      	movs	r1, #3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f95e 	bl	8007880 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075c4:	2110      	movs	r1, #16
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f8fa 	bl	80077c0 <USB_FlushTxFifo>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f924 	bl	8007824 <USB_FlushRxFifo>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ec:	461a      	mov	r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f8:	461a      	mov	r2, r3
 80075fa:	2300      	movs	r3, #0
 80075fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007604:	461a      	mov	r2, r3
 8007606:	2300      	movs	r3, #0
 8007608:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800760a:	2300      	movs	r3, #0
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	e043      	b.n	8007698 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007622:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007626:	d118      	bne.n	800765a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800763a:	461a      	mov	r2, r3
 800763c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	e013      	b.n	800766c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007650:	461a      	mov	r2, r3
 8007652:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	e008      	b.n	800766c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007666:	461a      	mov	r2, r3
 8007668:	2300      	movs	r3, #0
 800766a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007678:	461a      	mov	r2, r3
 800767a:	2300      	movs	r3, #0
 800767c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768a:	461a      	mov	r2, r3
 800768c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007690:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3301      	adds	r3, #1
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800769c:	461a      	mov	r2, r3
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d3b5      	bcc.n	8007610 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	e043      	b.n	8007732 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076c0:	d118      	bne.n	80076f4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d4:	461a      	mov	r2, r3
 80076d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	e013      	b.n	8007706 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ea:	461a      	mov	r2, r3
 80076ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80076f0:	6013      	str	r3, [r2, #0]
 80076f2:	e008      	b.n	8007706 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007700:	461a      	mov	r2, r3
 8007702:	2300      	movs	r3, #0
 8007704:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007712:	461a      	mov	r2, r3
 8007714:	2300      	movs	r3, #0
 8007716:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007724:	461a      	mov	r2, r3
 8007726:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800772a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	3301      	adds	r3, #1
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007736:	461a      	mov	r2, r3
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	4293      	cmp	r3, r2
 800773c:	d3b5      	bcc.n	80076aa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800774c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007750:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800775e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007760:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007764:	2b00      	cmp	r3, #0
 8007766:	d105      	bne.n	8007774 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	f043 0210 	orr.w	r2, r3, #16
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699a      	ldr	r2, [r3, #24]
 8007778:	4b0f      	ldr	r3, [pc, #60]	@ (80077b8 <USB_DevInit+0x2b4>)
 800777a:	4313      	orrs	r3, r2
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007780:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f043 0208 	orr.w	r2, r3, #8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007794:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007798:	2b01      	cmp	r3, #1
 800779a:	d105      	bne.n	80077a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699a      	ldr	r2, [r3, #24]
 80077a0:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <USB_DevInit+0x2b8>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077b4:	b004      	add	sp, #16
 80077b6:	4770      	bx	lr
 80077b8:	803c3800 	.word	0x803c3800
 80077bc:	40000004 	.word	0x40000004

080077c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077da:	d901      	bls.n	80077e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e01b      	b.n	8007818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	daf2      	bge.n	80077ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	019b      	lsls	r3, r3, #6
 80077f0:	f043 0220 	orr.w	r2, r3, #32
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007804:	d901      	bls.n	800780a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e006      	b.n	8007818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b20      	cmp	r3, #32
 8007814:	d0f0      	beq.n	80077f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800783c:	d901      	bls.n	8007842 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e018      	b.n	8007874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	daf2      	bge.n	8007830 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2210      	movs	r2, #16
 8007852:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007860:	d901      	bls.n	8007866 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e006      	b.n	8007874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b10      	cmp	r3, #16
 8007870:	d0f0      	beq.n	8007854 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	68f9      	ldr	r1, [r7, #12]
 800789c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078a0:	4313      	orrs	r3, r2
 80078a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80078cc:	f023 0303 	bic.w	r3, r3, #3
 80078d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078e0:	f043 0302 	orr.w	r3, r3, #2
 80078e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	f003 0301 	and.w	r3, r3, #1
}
 8007904:	4618      	mov	r0, r3
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3301      	adds	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007928:	d901      	bls.n	800792e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e01b      	b.n	8007966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	daf2      	bge.n	800791c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f043 0201 	orr.w	r2, r3, #1
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3301      	adds	r3, #1
 800794a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007952:	d901      	bls.n	8007958 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e006      	b.n	8007966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b01      	cmp	r3, #1
 8007962:	d0f0      	beq.n	8007946 <USB_CoreReset+0x36>

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <memset>:
 8007972:	4402      	add	r2, r0
 8007974:	4603      	mov	r3, r0
 8007976:	4293      	cmp	r3, r2
 8007978:	d100      	bne.n	800797c <memset+0xa>
 800797a:	4770      	bx	lr
 800797c:	f803 1b01 	strb.w	r1, [r3], #1
 8007980:	e7f9      	b.n	8007976 <memset+0x4>
	...

08007984 <__libc_init_array>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	4d0d      	ldr	r5, [pc, #52]	@ (80079bc <__libc_init_array+0x38>)
 8007988:	4c0d      	ldr	r4, [pc, #52]	@ (80079c0 <__libc_init_array+0x3c>)
 800798a:	1b64      	subs	r4, r4, r5
 800798c:	10a4      	asrs	r4, r4, #2
 800798e:	2600      	movs	r6, #0
 8007990:	42a6      	cmp	r6, r4
 8007992:	d109      	bne.n	80079a8 <__libc_init_array+0x24>
 8007994:	4d0b      	ldr	r5, [pc, #44]	@ (80079c4 <__libc_init_array+0x40>)
 8007996:	4c0c      	ldr	r4, [pc, #48]	@ (80079c8 <__libc_init_array+0x44>)
 8007998:	f000 f818 	bl	80079cc <_init>
 800799c:	1b64      	subs	r4, r4, r5
 800799e:	10a4      	asrs	r4, r4, #2
 80079a0:	2600      	movs	r6, #0
 80079a2:	42a6      	cmp	r6, r4
 80079a4:	d105      	bne.n	80079b2 <__libc_init_array+0x2e>
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ac:	4798      	blx	r3
 80079ae:	3601      	adds	r6, #1
 80079b0:	e7ee      	b.n	8007990 <__libc_init_array+0xc>
 80079b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b6:	4798      	blx	r3
 80079b8:	3601      	adds	r6, #1
 80079ba:	e7f2      	b.n	80079a2 <__libc_init_array+0x1e>
 80079bc:	08007a24 	.word	0x08007a24
 80079c0:	08007a24 	.word	0x08007a24
 80079c4:	08007a24 	.word	0x08007a24
 80079c8:	08007a28 	.word	0x08007a28

080079cc <_init>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	bf00      	nop
 80079d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d2:	bc08      	pop	{r3}
 80079d4:	469e      	mov	lr, r3
 80079d6:	4770      	bx	lr

080079d8 <_fini>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	bf00      	nop
 80079dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079de:	bc08      	pop	{r3}
 80079e0:	469e      	mov	lr, r3
 80079e2:	4770      	bx	lr
